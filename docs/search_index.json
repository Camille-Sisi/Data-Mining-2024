[["index.html", "DATA MINING Master Meci - Parcours PISE et CCESE - Option Data", " DATA MINING Master Meci - Parcours PISE et CCESE - Option Data Camille Signoretto, Maîtresse de conférences en économie, Université Paris Cité Février-juin 2024 "],["00-Presentation.html", "Présentation À propos de ce document Prérequis Remerciements Licence", " Présentation À propos de ce document Ce document est la version 2024 du cours de Data Mining dispensé aux étudiants de deuxième année de l’option Data du master MECI parcours PISE et CCESE. Ce cours est partagé avec Claude Grasland, dont vous trouverez la partie à l’adresse suivante : https://claudegrasland.github.io/datamining2024/. Ce document est régulièrement corrigé et mis à jour. La version de référence est disponible en ligne à l’adresse suivante : https://github.com/Camille-Sisi/Data-Mining-2024. Pour toute suggestion ou correction, n’hésitez pas à me contacter par mail. Prérequis Le seul prérequis pour suivre ce document est d’avoir installé R et RStudio sur votre ordinateur. Il s’agit de deux logiciels libres, gratuits, téléchargeables en ligne et fonctionnant sous PC, Mac et Linux. Pour installer R, il suffit de se rendre sur une des pages suivantes1 : Installer R sous Windows Installer R sous Mac Pour installer RStudio, rendez-vous sur la page suivante et téléchargez la version adaptée à votre système : https://www.rstudio.com/products/rstudio/download/#download Remerciements Ce document a bénéficié des suggestions des étudiants qui en ont été les cobayes les premières années. Ce document est généré par l’extension bookdown de Yihui Xie et se base sur le template proposé par Julien Barnier pour introduire des exercices interactifs dans son cours de tidyverse. Licence Ce document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Pas d’Utilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International. Sous Linux, utilisez votre gestionnaire de packages habituel.↩︎ "],["01-Base-de-donnees.html", "Section 1 Récupération de la base de données 1.1 Les données du Recensement de la Population (RP) 1.2 Quelles informations intéressantes dans cette base ?", " Section 1 Récupération de la base de données On va travailler cette année sur les données du Recensement de la Population (RP). C’est une base de données riche en informations, qui s’appuie sur les enquêtes annuelles du recensement et est produite par l’Insee. Les fichiers mis à disposition sur leur site sont au nombre de 9 : ils rassemblent des informations différentes, sur des espaces géographiques différents (canton ou ville, région), et à des niveaux d’analyse différents (individus, ménages/logements). Les derniers fichiers disponibles portent sur l’année 2020 mais nous allons travailer sur l’année 2019 qui rassemble les enquêtes annuelles du recensement (EAR) des années 2017 à 2021. Avant de rentrer plus dans les détails, on va charger les librairies principales que l’on va utiliser lors de cette séance (si elles ne sont pas installées sur votre RStudio, il faut le faire avant en utilisant la commande install.packages(\"nom.du.package\"), on pourra en appeler d’autres dans les deux sections suivantes. # Chargement des librairies library(tidyverse) library(data.table) library(gt) 1.1 Les données du Recensement de la Population (RP) On va travailler plus précisément à partir du fichier “Individus localisés au canton-ou-ville” qui décrit les caractéristiques des individus et celles des ménages qui les occupent. Les données sont localisées au niveau de la commune et de l’IRIS. On ne va pas s’intéresser à l’ensemble de la France, pour des questions d’intérêt et d’analyse, ainsi que des questions pratiques (ces fichiers étant lourds). On va donc télécharger uniquement ce fichier pour la zone A, c’est-à-dire l’Île-de-France. Le mieux est de télécharger le fichier puis le dézipper directement dans R comme ci-dessous en copiant le lien URL sur le site de l’Insee ; et on le stock dans le dossier “data” de notre projet R. Sinon, il reste possible de le télécharger via internet et de l’enregistrer dans un de vos dossiers bien spécifiés pour le “dézipper” ensuite. download.file(url=&quot;https://www.insee.fr/fr/statistiques/fichier/6544333/RP2019_INDCVIZA_csv.zip&quot;, destfile = &quot;data/RP2019_INDCVIZA_csv.zip&quot;) # Le fichier a donc été téléchargé dans le dossier intitulé &quot;data&quot; du projet R, on va # maintenant le dézipper et enregistrer les fichiers extraits dans le même dossier. unzip(&quot;data/RP2019_INDCVIZA_csv.zip&quot;, exdir = &quot;data&quot;) Il nous reste plus qu’à charger les données dans notre environnement RStudio : pour cela on utilise la commande fread du package data.table (à installer avant), car cela va bien plus vite que les fonctions habituelles du type read.csv lorsqu’on a de gros fichiers. On indique également l’option stringsAsFactors=TRUE pour que les variables caractères soient directement transformées en variables “factor” (dont l’utilité est indéniable dans R, on en reparlera plus loin), et on transforme l’objet obtenu en data.frame. # install.packages(&quot;data.table&quot;) library(data.table) RP &lt;- fread(&quot;data/FD_INDCVIZA_2019.csv&quot;, stringsAsFactors=TRUE) RP &lt;- as.data.frame(RP) On a donc 88 variables et 4 354 518 observations. Pour se renseigner sur les variables de la table, on peut télécharger également le fichier des métadonnées avec la commande read.csv cette fois, ce qui nous permet de voir quelles options sont utiles ici : l’argument sep = nous permet d’indiquer comment sont séparées les informations dans le fichier initial, l’argument encoding = permet que les accents aigus soient compris par R comme tel, et enfin la même option stringsAsFactors=TRUE peut être utilisée ici. # Lecture du fichier de métadonnées meta &lt;- read.csv(file = &#39;data/Varmod_INDCVI_2019.csv&#39;, sep = &quot;;&quot;, encoding = &quot;UTF-8&quot;, stringsAsFactors = TRUE) On peut enregistrer ce fichier, ainsi que celui contenant les métadonnées, dans le dossier R au format RDS. # Enregistrement des fichiers saveRDS(object = RP, file = &quot;data/indiv2019.Rdata&quot;) saveRDS(object = meta, file = &quot;data/meta.Rdata&quot;) 1.2 Quelles informations intéressantes dans cette base ? On peut regarder plus précisément les variables disponibles dans cette base de données à partir de la table de métadonnées : on peut le faire avec la fonction view() et dans ce cas la table s’affichera dans un nouvel onglet dans votre RStudio ; sinon pour l’afficher sur notre document notebook, on peut utiliser la fonction head() et/ou tail() qui affiche respectivement les premières lignes et les dernières lignes de la table. # view(meta) meta %&gt;% head() %&gt;% gt() #La fonction gt() permet un affichage plus joli pour le document html #aomjodxhji table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #aomjodxhji thead, #aomjodxhji tbody, #aomjodxhji tfoot, #aomjodxhji tr, #aomjodxhji td, #aomjodxhji th { border-style: none; } #aomjodxhji p { margin: 0; padding: 0; } #aomjodxhji .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #aomjodxhji .gt_caption { padding-top: 4px; padding-bottom: 4px; } #aomjodxhji .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #aomjodxhji .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #aomjodxhji .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #aomjodxhji .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aomjodxhji .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #aomjodxhji .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #aomjodxhji .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #aomjodxhji .gt_column_spanner_outer:first-child { padding-left: 0; } #aomjodxhji .gt_column_spanner_outer:last-child { padding-right: 0; } #aomjodxhji .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #aomjodxhji .gt_spanner_row { border-bottom-style: hidden; } #aomjodxhji .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #aomjodxhji .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #aomjodxhji .gt_from_md > :first-child { margin-top: 0; } #aomjodxhji .gt_from_md > :last-child { margin-bottom: 0; } #aomjodxhji .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #aomjodxhji .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #aomjodxhji .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #aomjodxhji .gt_row_group_first td { border-top-width: 2px; } #aomjodxhji .gt_row_group_first th { border-top-width: 2px; } #aomjodxhji .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #aomjodxhji .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #aomjodxhji .gt_first_summary_row.thick { border-top-width: 2px; } #aomjodxhji .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aomjodxhji .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #aomjodxhji .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #aomjodxhji .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #aomjodxhji .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #aomjodxhji .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aomjodxhji .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #aomjodxhji .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #aomjodxhji .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #aomjodxhji .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #aomjodxhji .gt_left { text-align: left; } #aomjodxhji .gt_center { text-align: center; } #aomjodxhji .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #aomjodxhji .gt_font_normal { font-weight: normal; } #aomjodxhji .gt_font_bold { font-weight: bold; } #aomjodxhji .gt_font_italic { font-style: italic; } #aomjodxhji .gt_super { font-size: 65%; } #aomjodxhji .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #aomjodxhji .gt_asterisk { font-size: 100%; vertical-align: 0; } #aomjodxhji .gt_indent_1 { text-indent: 5px; } #aomjodxhji .gt_indent_2 { text-indent: 10px; } #aomjodxhji .gt_indent_3 { text-indent: 15px; } #aomjodxhji .gt_indent_4 { text-indent: 20px; } #aomjodxhji .gt_indent_5 { text-indent: 25px; } COD_VAR LIB_VAR COD_MOD LIB_MOD TYPE_VAR LONG_VAR CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0101 Ambérieu-en-Bugey (0101) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0102 Attignat (0102) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0103 Valserhône (0103) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0104 Belley (0104) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0105 Bourg-en-Bresse-1 (0105) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0106 Bourg-en-Bresse-2 (0106) CHAR 5 On peut établir la liste des variables en utilisant la fonction levels qui donne les niveaux de la variable “COD_VAR” puisque c’est une variable ‘factor’. levels(meta$COD_VAR) [1] &quot;ACHLR&quot; &quot;AEMMR&quot; &quot;AGED&quot; &quot;AGER20&quot; &quot;AGEREV&quot; &quot;AGEREVQ&quot; [7] &quot;ANAI&quot; &quot;ANEMR&quot; &quot;APAF&quot; &quot;ARM&quot; &quot;ASCEN&quot; &quot;BAIN&quot; [13] &quot;BATI&quot; &quot;CANTVILLE&quot; &quot;CATIRIS&quot; &quot;CATL&quot; &quot;CATPC&quot; &quot;CHAU&quot; [19] &quot;CHFL&quot; &quot;CHOS&quot; &quot;CLIM&quot; &quot;CMBL&quot; &quot;COUPLE&quot; &quot;CS1&quot; [25] &quot;CUIS&quot; &quot;DEPT&quot; &quot;DEROU&quot; &quot;DIPL&quot; &quot;DNAI&quot; &quot;EAU&quot; [31] &quot;EGOUL&quot; &quot;ELEC&quot; &quot;EMPL&quot; &quot;ETUD&quot; &quot;GARL&quot; &quot;HLML&quot; [37] &quot;ILETUD&quot; &quot;ILT&quot; &quot;IMMI&quot; &quot;INAI&quot; &quot;INATC&quot; &quot;INFAM&quot; [43] &quot;INPER&quot; &quot;INPERF&quot; &quot;IPONDI&quot; &quot;IRAN&quot; &quot;IRIS&quot; &quot;LIENF&quot; [49] &quot;LPRF&quot; &quot;LPRM&quot; &quot;METRODOM&quot; &quot;MOCO&quot; &quot;MODV&quot; &quot;NA17&quot; [55] &quot;NA5&quot; &quot;NAIDT&quot; &quot;NBPI&quot; &quot;NE17FR&quot; &quot;NE24FR&quot; &quot;NE3FR&quot; [61] &quot;NE5FR&quot; &quot;NENFR&quot; &quot;NPERR&quot; &quot;NUMF&quot; &quot;NUMMI&quot; &quot;ORIDT&quot; [67] &quot;RECH&quot; &quot;REGION&quot; &quot;SANI&quot; &quot;SANIDOM&quot; &quot;SEXE&quot; &quot;SFM&quot; [73] &quot;STAT_CONJ&quot; &quot;STATR&quot; &quot;STOCD&quot; &quot;SURF&quot; &quot;TACT&quot; &quot;TACTD16&quot; [79] &quot;TP&quot; &quot;TRANS&quot; &quot;TRIRIS&quot; &quot;TYPC&quot; &quot;TYPFC&quot; &quot;TYPL&quot; [85] &quot;TYPMC&quot; &quot;TYPMR&quot; &quot;VOIT&quot; &quot;WC&quot; Les codes des variables n’étant pas très parlant, on va les afficher avec leur intitulé : pour cela, il suffit de repartir de la table meta en sélectionnant les 2 colonnes qui nous intéressent et en n’affichant pas les valeurs dupliquées avec la fonction unique(). meta %&gt;% select(COD_VAR, LIB_VAR) %&gt;% unique() %&gt;% gt() #ghbfmnpgnt table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ghbfmnpgnt thead, #ghbfmnpgnt tbody, #ghbfmnpgnt tfoot, #ghbfmnpgnt tr, #ghbfmnpgnt td, #ghbfmnpgnt th { border-style: none; } #ghbfmnpgnt p { margin: 0; padding: 0; } #ghbfmnpgnt .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ghbfmnpgnt .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ghbfmnpgnt .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ghbfmnpgnt .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ghbfmnpgnt .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ghbfmnpgnt .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ghbfmnpgnt .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ghbfmnpgnt .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ghbfmnpgnt .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ghbfmnpgnt .gt_column_spanner_outer:first-child { padding-left: 0; } #ghbfmnpgnt .gt_column_spanner_outer:last-child { padding-right: 0; } #ghbfmnpgnt .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ghbfmnpgnt .gt_spanner_row { border-bottom-style: hidden; } #ghbfmnpgnt .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ghbfmnpgnt .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ghbfmnpgnt .gt_from_md > :first-child { margin-top: 0; } #ghbfmnpgnt .gt_from_md > :last-child { margin-bottom: 0; } #ghbfmnpgnt .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ghbfmnpgnt .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ghbfmnpgnt .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ghbfmnpgnt .gt_row_group_first td { border-top-width: 2px; } #ghbfmnpgnt .gt_row_group_first th { border-top-width: 2px; } #ghbfmnpgnt .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ghbfmnpgnt .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ghbfmnpgnt .gt_first_summary_row.thick { border-top-width: 2px; } #ghbfmnpgnt .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ghbfmnpgnt .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ghbfmnpgnt .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ghbfmnpgnt .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ghbfmnpgnt .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ghbfmnpgnt .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ghbfmnpgnt .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ghbfmnpgnt .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ghbfmnpgnt .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ghbfmnpgnt .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ghbfmnpgnt .gt_left { text-align: left; } #ghbfmnpgnt .gt_center { text-align: center; } #ghbfmnpgnt .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ghbfmnpgnt .gt_font_normal { font-weight: normal; } #ghbfmnpgnt .gt_font_bold { font-weight: bold; } #ghbfmnpgnt .gt_font_italic { font-style: italic; } #ghbfmnpgnt .gt_super { font-size: 65%; } #ghbfmnpgnt .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ghbfmnpgnt .gt_asterisk { font-size: 100%; vertical-align: 0; } #ghbfmnpgnt .gt_indent_1 { text-indent: 5px; } #ghbfmnpgnt .gt_indent_2 { text-indent: 10px; } #ghbfmnpgnt .gt_indent_3 { text-indent: 15px; } #ghbfmnpgnt .gt_indent_4 { text-indent: 20px; } #ghbfmnpgnt .gt_indent_5 { text-indent: 25px; } COD_VAR LIB_VAR CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) NUMMI Numéro du ménage dans le canton-ou-ville (anonymisé) ACHLR Période regroupée d'achèvement de la construction de la maison ou de l'immeuble AEMMR Année d'emménagement dans le logement (regroupée) AGED Âge détaillé (en différence de millésimes) AGER20 Âge en années révolues (âge au dernier anniversaire) en 13 classes d'âge, détaillées autour de 20 ans AGEREV Âge en années révolues détaillé AGEREVQ Âge quinquennal en années révolues ANAI Année de naissance ANEMR Ancienneté d'emménagement dans le logement (regroupée) APAF Appartenance à une famille ARM Arrondissement municipal de résidence (Paris, Lyon et Marseille) ARM Arrondissement municipal de résidence (Paris,Lyon et Marseille) ASCEN Desserte par un ascenseur BAIN Baignoire ou douche (DOM) BATI Aspect du bâti (DOM) CATIRIS Catégorie de l'IRIS CATL Catégorie de logement CATPC Catégorie de population condensée CHAU Moyen de chauffage du logement (DOM) CHFL Chauffage central du logement (France métropolitaine) CHOS Chauffe-eau solaire (DOM) CLIM Existence d'au moins une pièce climatisée (DOM) CMBL Combustible principal du logement (France métropolitaine) COUPLE Déclaration de vie en couple CS1 Catégorie socioprofessionnelle en 8 postes CUIS Cuisine intérieure avec évier (DOM) DEPT Département du lieu de résidence DEROU Nombre de deux-roues à moteur du ménage (DOM) DIPL Diplôme le plus élevé DNAI Département de naissance (si né en France) EAU Point d'eau potable à l'intérieur du logement (DOM) EGOUL Mode d'évacuation des eaux usées (DOM) ELEC Électricité dans le logement (DOM) EMPL Condition d'emploi ETUD Inscription dans un établissement d'enseignement GARL Emplacement réservé de stationnement HLML Appartenance du logement à un organisme HLM ILETUD Indicateur du lieu d'études ILT Indicateur du lieu de travail IMMI Situation quant à l'immigration INAI Indicateur du lieu de naissance INATC Indicateur de nationalité condensé (Français/Étranger) INFAM Nombre de familles du ménage INPER Nombre de personnes du ménage INPERF Nombre de personnes de la famille IPONDI Poids de l'individu IRAN Indicateur de résidence antérieure au 1er janvier de l'année précédente IRIS Code IRIS du lieu de résidence LIENF Lien familial LPRF Lien à la personne de référence de la famille LPRM Lien à la personne de référence du ménage METRODOM Indicateur Métropole ou DOM du lieu de résidence MOCO Mode de cohabitation MODV Mode de vie NA17 Activité économique en 17 postes (NA - A17) NA5 Activité économique regroupée en 5 postes NAIDT Naissance dans un DOM-TOM-COM NBPI Nombre de pièces du logement NE17FR Nombre d'enfants âgés de 17 ans ou moins de la famille (regroupé) NE24FR Nombre d'enfants âgés de 24 ans ou moins de la famille (regroupé) NE3FR Nombre d'enfants âgés de 3 ans ou moins de la famille (regroupé) NE5FR Nombre d'enfants âgés de 5 ans ou moins de la famille (regroupé) NENFR Nombre d'enfants de la famille (regroupé) NPERR Nombre de personnes du ménage (regroupé) NUMF Numéro de famille ORIDT Originaire d'un DOM-TOM-COM RECH Ancienneté de recherche d'emploi REGION Région du lieu de résidence SANI Installations sanitaires (France métropolitaine) SANIDOM Installations sanitaires (DOM) SEXE Sexe SFM Structure familiale du ménage STATR Statut professionnel regroupé STAT_CONJ Statut conjugal STOCD Statut d'occupation détaillé du logement SURF Superficie du logement TACT Type d'activité TACTD16 Type d'activité détaillé en 16 postes TP Temps de travail TRANS Mode de transport principal le plus souvent utilisé pour aller travailler TRIRIS Code TRIRIS du lieu de résidence TYPC Type de construction TYPFC Type de famille condensé TYPL Type de logement TYPMC Type de ménage regroupé (en 4 postes) TYPMR Type de ménage regroupé (en 9 postes) VOIT Nombre de voitures du ménage WC Présence de W.-C. à l'intérieur du logement (DOM) Ou si on veut les afficher par ordre alphabétique selon le nom de la variable, on peut utiliser la fonction arrange() qui permet de trier une table de données selon la variable indiquée : meta %&gt;% select(COD_VAR, LIB_VAR) %&gt;% unique() %&gt;% arrange(COD_VAR) %&gt;% gt() L’une des difficultés pour l’analyse de cette base de données réside dans les différents niveaux présents : “individu” pour la personne de référence du ménage ; “ménage” regroupant l’ensemble des occupants d’une résidence principale, qu’ils aient ou non des liens de parenté ; “famille” partie d’un ménage comprenant au moins 2 personnes (par exemple, un couple, ou un adulte avec un enfant…) ; et enfin “logement” qui comprend ici les résidences principales et rassemble des informations décrivant les types de logement. Il faut bien comprendre comment utiliser à bon escient ces différents niveaux, en particulier ici le niveau logement : pour toute variable de ce niveau, il faudra utiliser un filtre, c’est-à-dire ne prendre que la personne de référence du ménage (LPRM==\"1\"). Il faut également penser que les données sont pondérées, donc pour sortir des statistiques descriptives, il faut à chaque fois mettre la variable de pondération IPONDI. "],["02-Manipulation-base.html", "Section 2 Manipulation de la base 2.1 Format des données - WIDE ou LONG 2.2 Sélectionner un champ réduit de la base, séparer les données", " Section 2 Manipulation de la base On peut maintenant regarder à quoi ressemble la table principale, celle des données. RP %&gt;% head() %&gt;% gt() #kewjsxxpej table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #kewjsxxpej thead, #kewjsxxpej tbody, #kewjsxxpej tfoot, #kewjsxxpej tr, #kewjsxxpej td, #kewjsxxpej th { border-style: none; } #kewjsxxpej p { margin: 0; padding: 0; } #kewjsxxpej .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #kewjsxxpej .gt_caption { padding-top: 4px; padding-bottom: 4px; } #kewjsxxpej .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #kewjsxxpej .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #kewjsxxpej .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kewjsxxpej .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kewjsxxpej .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kewjsxxpej .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #kewjsxxpej .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #kewjsxxpej .gt_column_spanner_outer:first-child { padding-left: 0; } #kewjsxxpej .gt_column_spanner_outer:last-child { padding-right: 0; } #kewjsxxpej .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #kewjsxxpej .gt_spanner_row { border-bottom-style: hidden; } #kewjsxxpej .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #kewjsxxpej .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #kewjsxxpej .gt_from_md > :first-child { margin-top: 0; } #kewjsxxpej .gt_from_md > :last-child { margin-bottom: 0; } #kewjsxxpej .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #kewjsxxpej .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #kewjsxxpej .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #kewjsxxpej .gt_row_group_first td { border-top-width: 2px; } #kewjsxxpej .gt_row_group_first th { border-top-width: 2px; } #kewjsxxpej .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kewjsxxpej .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #kewjsxxpej .gt_first_summary_row.thick { border-top-width: 2px; } #kewjsxxpej .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kewjsxxpej .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kewjsxxpej .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #kewjsxxpej .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #kewjsxxpej .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #kewjsxxpej .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kewjsxxpej .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kewjsxxpej .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #kewjsxxpej .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kewjsxxpej .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #kewjsxxpej .gt_left { text-align: left; } #kewjsxxpej .gt_center { text-align: center; } #kewjsxxpej .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #kewjsxxpej .gt_font_normal { font-weight: normal; } #kewjsxxpej .gt_font_bold { font-weight: bold; } #kewjsxxpej .gt_font_italic { font-style: italic; } #kewjsxxpej .gt_super { font-size: 65%; } #kewjsxxpej .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #kewjsxxpej .gt_asterisk { font-size: 100%; vertical-align: 0; } #kewjsxxpej .gt_indent_1 { text-indent: 5px; } #kewjsxxpej .gt_indent_2 { text-indent: 10px; } #kewjsxxpej .gt_indent_3 { text-indent: 15px; } #kewjsxxpej .gt_indent_4 { text-indent: 20px; } #kewjsxxpej .gt_indent_5 { text-indent: 25px; } CANTVILLE NUMMI ACHLR AEMMR AGED AGER20 AGEREV AGEREVQ ANAI ANEMR APAF ARM ASCEN BAIN BATI CATIRIS CATL CATPC CHAU CHFL CHOS CLIM CMBL COUPLE CS1 CUIS DEPT DEROU DIPL DNAI EAU EGOUL ELEC EMPL ETUD GARL HLML ILETUD ILT IMMI INAI INATC INFAM INPER INPERF IPONDI IRAN IRIS LIENF LPRF LPRM METRODOM MOCO MODV NA17 NA5 NAIDT NBPI NE17FR NE24FR NE3FR NE5FR NENFR NPERR NUMF ORIDT RECH REGION SANI SANIDOM SEXE SFM STAT_CONJ STATR STOCD SURF TACT TACTD16 TP TRANS TRIRIS TYPC TYPFC TYPL TYPMC TYPMR VOIT WC 75ZZ 1 1 9 72 79 72 70 1944 02 0 75115 1 Z Z H 1 0 Z 2 Z Z 2 2 7 Z 75 Z 19 2B Z Z Z ZZ 2 1 2 Z Z 2 3 1 0 1 Z 3.360730 1 751155817 0 0 1 M 32 50 ZZ ZZ 0 04 Z Z Z Z Z 1 Z 0 0 11 2 ZZ 2 12 6 Z 10 4 21 210 Z Z 751501 3 Z 1 1 12 1 Z 75ZZ 2 2 9 59 64 58 55 1958 03 1 75112 2 Z Z H 1 0 Z 3 Z Z 4 1 3 Z 75 Z 17 99 Z Z Z 21 2 2 2 Z 1 1 6 1 1 2 2 3.668459 1 751124512 1 1 1 M 21 40 FZ FZ 30 01 0 0 0 0 0 2 1 0 Z 11 1 ZZ 1 30 3 2 21 1 11 116 1 5 750901 3 2 6 4 41 0 Z 75ZZ 2 2 9 30 29 29 25 1987 03 1 75112 2 Z Z H 1 0 Z 3 Z Z 4 1 3 Z 75 Z 16 99 Z Z Z 21 2 2 2 Z 3 1 6 2 1 2 2 3.668459 1 751124512 1 2 2 M 21 31 MN GU 30 01 0 0 0 0 0 2 1 0 Z 11 1 ZZ 1 30 3 2 21 1 11 111 1 6 750901 3 2 6 4 41 0 Z 75ZZ 3 1 7 82 80 81 80 1938 05 2 75115 1 Z Z H 1 0 Z 2 Z Z 2 1 7 Z 75 Z 14 92 Z Z Z ZZ 2 1 2 Z Z 2 2 1 1 2 2 3.478821 1 751155907 2 2 2 M 21 40 ZZ ZZ 0 03 0 0 0 0 0 2 1 0 9 11 2 ZZ 2 30 1 Z 10 4 21 210 Z Z 751431 3 2 2 4 44 1 Z 75ZZ 3 1 7 86 80 85 85 1934 05 1 75115 1 Z Z H 1 0 Z 2 Z Z 2 1 7 Z 75 Z 14 75 Z Z Z ZZ 2 1 2 Z Z 2 1 1 1 2 2 3.478821 1 751155907 1 1 1 M 21 40 ZZ ZZ 0 03 0 0 0 0 0 2 1 0 9 11 2 ZZ 1 30 1 Z 10 4 21 210 Z Z 751431 3 2 2 4 44 1 Z 75ZZ 4 2 9 1 2 0 0 2019 01 3 75116 1 Z Z H 1 0 Z 2 Z Z 2 2 8 Z 75 Z ZZ 92 Z Z Z ZZ 2 1 2 Z Z 2 2 1 1 3 3 2.776887 Z 751166301 3 3 3 M 12 12 ZZ ZZ 0 04 2 2 2 2 2 3 1 0 Z 11 2 ZZ 1 22 6 Z 30 6 23 230 Z Z 751741 3 1 2 3 32 1 Z La fonction str() ou son équivalent en langage dplyr la fonction glimpse nous donne la liste des variables avec cette fois leur format et leurs modalités (les premières seulement s’il y en a beaucoup). # str(RP) RP %&gt;% glimpse() Rows: 4,354,518 Columns: 88 $ CANTVILLE &lt;fct&gt; 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, … $ NUMMI &lt;fct&gt; 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7, 8, 9, 10, 10, 1… $ ACHLR &lt;fct&gt; 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 4, 3, 3, 3, 3, 4, 3, 4, 4, 4, … $ AEMMR &lt;fct&gt; 9, 9, 9, 7, 7, 9, 9, 9, 6, 6, 9, 9, 9, 9, 9, 7, 6, 9, 9, 9, … $ AGED &lt;int&gt; 72, 59, 30, 82, 86, 1, 34, 3, 67, 67, 34, 51, 48, 17, 13, 82… $ AGER20 &lt;int&gt; 79, 64, 29, 80, 80, 2, 39, 2, 79, 79, 39, 54, 54, 17, 14, 80… $ AGEREV &lt;int&gt; 72, 58, 29, 81, 85, 0, 33, 2, 67, 66, 33, 50, 47, 16, 12, 81… $ AGEREVQ &lt;int&gt; 70, 55, 25, 80, 85, 0, 30, 0, 65, 65, 30, 50, 45, 15, 10, 80… $ ANAI &lt;int&gt; 1944, 1958, 1987, 1938, 1934, 2019, 1986, 2017, 1950, 1950, … $ ANEMR &lt;fct&gt; 02, 03, 03, 05, 05, 01, 01, 01, 06, 06, 01, 03, 03, 03, 03, … $ APAF &lt;fct&gt; 0, 1, 1, 2, 1, 3, 2, 3, 1, 2, 0, 1, 2, 3, 3, 0, 0, 3, 2, 3, … $ ARM &lt;fct&gt; 75115, 75112, 75112, 75115, 75115, 75116, 75116, 75116, 7511… $ ASCEN &lt;fct&gt; 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, … $ BAIN &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ BATI &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ CATIRIS &lt;fct&gt; H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, … $ CATL &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … $ CATPC &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … $ CHAU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ CHFL &lt;fct&gt; 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, … $ CHOS &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ CLIM &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ CMBL &lt;fct&gt; 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 1, 1, 1, 1, … $ COUPLE &lt;int&gt; 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, … $ CS1 &lt;int&gt; 7, 3, 3, 7, 7, 8, 8, 8, 7, 7, 3, 5, 5, 8, 8, 7, 7, 5, 4, 4, … $ CUIS &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ DEPT &lt;int&gt; 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, … $ DEROU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ DIPL &lt;fct&gt; 19, 17, 16, 14, 14, ZZ, 18, ZZ, 17, 16, 18, 03, 13, 03, ZZ, … $ DNAI &lt;fct&gt; 2B, 99, 99, 92, 75, 92, 92, 92, 92, 92, 49, 99, 99, 93, 75, … $ EAU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ EGOUL &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ ELEC &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ EMPL &lt;fct&gt; ZZ, 21, 21, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, 16, 16, 16, ZZ, ZZ, … $ ETUD &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, … $ GARL &lt;fct&gt; 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, … $ HLML &lt;fct&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, … $ ILETUD &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, 1, 1, Z, Z, Z, Z, Z, … $ ILT &lt;fct&gt; Z, 1, 3, Z, Z, Z, Z, Z, Z, Z, 3, 1, 1, Z, Z, Z, Z, 1, 1, Z, … $ IMMI &lt;int&gt; 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, … $ INAI &lt;int&gt; 3, 6, 6, 2, 1, 2, 2, 2, 2, 2, 3, 6, 6, 2, 1, 1, 2, 3, 3, 3, … $ INATC &lt;int&gt; 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … $ INFAM &lt;fct&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, … $ INPER &lt;fct&gt; 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 1, 4, 4, 4, 4, 1, 1, 3, 3, 3, … $ INPERF &lt;fct&gt; Z, 2, 2, 2, 2, 3, 3, 3, 2, 2, Z, 4, 4, 4, 4, Z, Z, 3, 3, 3, … $ IPONDI &lt;dbl&gt; 3.360730, 3.668459, 3.668459, 3.478821, 3.478821, 2.776887, … $ IRAN &lt;fct&gt; 1, 1, 1, 1, 1, Z, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … $ IRIS &lt;fct&gt; 751155817, 751124512, 751124512, 751155907, 751155907, 75116… $ LIENF &lt;fct&gt; 0, 1, 1, 2, 1, 3, 2, 3, 1, 2, 0, 1, 2, 3, 3, 0, 0, 3, 2, 3, … $ LPRF &lt;fct&gt; 0, 1, 2, 2, 1, 3, 1, 3, 1, 2, 0, 1, 2, 3, 3, 0, 0, 3, 1, 3, … $ LPRM &lt;fct&gt; 1, 1, 2, 2, 1, 3, 1, 3, 1, 2, 1, 1, 2, 3, 3, 1, 1, 3, 1, 3, … $ METRODOM &lt;fct&gt; M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, … $ MOCO &lt;int&gt; 32, 21, 21, 21, 21, 12, 23, 12, 21, 21, 32, 22, 22, 11, 11, … $ MODV &lt;int&gt; 50, 40, 31, 40, 40, 12, 33, 12, 40, 40, 20, 32, 32, 11, 11, … $ NA17 &lt;fct&gt; ZZ, FZ, MN, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, OQ, MN, MN, ZZ, ZZ, … $ NA5 &lt;fct&gt; ZZ, FZ, GU, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, OQ, GU, GU, ZZ, ZZ, … $ NAIDT &lt;int&gt; 0, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 0, 0, 0, 0, 0, 0,… $ NBPI &lt;fct&gt; 04, 01, 01, 03, 03, 04, 04, 04, 08, 08, 01, 03, 03, 03, 03, … $ NE17FR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 2, 2, 2, 2, Z, Z, 0, 0, 0, … $ NE24FR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 2, 2, 2, 2, Z, Z, 1, 1, 1, … $ NE3FR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 0, 0, 0, 0, Z, Z, 0, 0, 0, … $ NE5FR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 0, 0, 0, 0, Z, Z, 0, 0, 0, … $ NENFR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 2, 2, 2, 2, Z, Z, 2, 2, 2, … $ NPERR &lt;fct&gt; 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 1, 4, 4, 4, 4, 1, 1, 3, 3, 3, … $ NUMF &lt;fct&gt; Z, 1, 1, 1, 1, 1, 1, 1, 1, 1, Z, 1, 1, 1, 1, Z, Z, 1, 1, 1, … $ ORIDT &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … $ RECH &lt;fct&gt; 0, Z, Z, 9, 9, Z, 0, Z, 0, 0, Z, Z, Z, 0, Z, 9, 0, Z, Z, 1, … $ REGION &lt;int&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, … $ SANI &lt;fct&gt; 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … $ SANIDOM &lt;fct&gt; ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, … $ SEXE &lt;int&gt; 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, … $ SFM &lt;fct&gt; 12, 30, 30, 30, 30, 22, 22, 22, 30, 30, 12, 32, 32, 32, 32, … $ STAT_CONJ &lt;int&gt; 6, 3, 3, 1, 1, 6, 1, 6, 1, 1, 6, 3, 3, 6, 6, 4, 5, 6, 6, 6, … $ STATR &lt;fct&gt; Z, 2, 2, Z, Z, Z, Z, Z, Z, Z, 1, 1, 1, Z, Z, Z, Z, 1, 1, Z, … $ STOCD &lt;fct&gt; 10, 21, 21, 10, 10, 30, 30, 30, 10, 10, 21, 30, 30, 30, 30, … $ SURF &lt;fct&gt; 4, 1, 1, 4, 4, 6, 6, 6, 7, 7, 1, 4, 4, 4, 4, 3, 3, 6, 6, 6, … $ TACT &lt;int&gt; 21, 11, 11, 21, 21, 23, 24, 23, 21, 21, 11, 11, 11, 22, 23, … $ TACTD16 &lt;int&gt; 210, 116, 111, 210, 210, 230, 240, 230, 210, 210, 111, 111, … $ TP &lt;fct&gt; Z, 1, 1, Z, Z, Z, Z, Z, Z, Z, 2, 1, 1, Z, Z, Z, Z, 1, 1, Z, … $ TRANS &lt;fct&gt; Z, 5, 6, Z, Z, Z, Z, Z, Z, Z, 6, 6, 6, Z, Z, Z, Z, 6, 1, Z, … $ TRIRIS &lt;fct&gt; 751501, 750901, 750901, 751431, 751431, 751741, 751741, 7517… $ TYPC &lt;fct&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, … $ TYPFC &lt;fct&gt; Z, 2, 2, 2, 2, 1, 1, 1, 2, 2, Z, 2, 2, 2, 2, Z, Z, 1, 1, 1, … $ TYPL &lt;fct&gt; 1, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … $ TYPMC &lt;fct&gt; 1, 4, 4, 4, 4, 3, 3, 3, 4, 4, 1, 4, 4, 4, 4, 1, 1, 3, 3, 3, … $ TYPMR &lt;fct&gt; 12, 41, 41, 44, 44, 32, 32, 32, 44, 44, 12, 41, 41, 41, 41, … $ VOIT &lt;fct&gt; 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, … $ WC &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … Les variables sont en format, soit ‘int’ (“integer” - nombres entiers), soit ‘fct’ (“factor”), ou encore ‘dbl’ (“double” - nombres réels). On remarque que la plupart des variables ont des modalités en chiffres et/ou lettres, ce qui signifie qu’il faudra probablement recoder ces modalités pour leur donner des libellés dans nos analyses descriptives (tableaux ou graphiques). Par ailleurs, certaines variables ont été laissées en format ‘integer’ bien que l’on avait mis l’option stringsAsFactors=TRUE lors du chargement des données, or ces chiffres correspondent bien à des modalités d’une variable catégorielle, il faudra donc le corriger ultérieurement. Dernière remarque, si on avait eu des valeurs manquantes sur certaines variables, elles se seraient ici affichées avec la modalité NA, cela ne semble pas le cas, à vérifier par la suite. En revanche, on voit parfois des modalités “z” ou “zz”, il faudra vérifier ce qu’elles indiquent. 2.1 Format des données - WIDE ou LONG La question du format de la table de données est importante, on distingue généralement le format wide du format long : le premier renvoie au cas où chaque ligne correspond a un et un seul individu (ou autre niveau de l’analyse : une entreprise, un ménage, un logement, etc.), et toutes les informations le concernant sont données en colonnes (ce qui peut augmenter rapidement le nombre de colonnes), c’est l’exemple d’une information que l’on a sur plusieurs années, chaque colonne correspondant à l’information de l’année en question ; le second, au contraire, multiplie les lignes pour un seul individu, mais il y a alors moins de colonnes, à partir du même exemple précédent, il y aura cette fois une colonne indiquant l’année et une colonne contenant l’information. Ici, chaque ligne correspond à un individu auquel est associé un logement, un ménage ou encore une famille ; on est bien dans un format wide. L’unité statistique de base est donc l’individu, mais on peut vouloir choisir de se mettre au niveau logement ou ménage ou famille, pour étudier les caractéristiques de ces unités. Autre exemple, on peut aussi considérer que notre niveau d’analyse est la commune, on verra alors qu’on dispose de plusieurs lignes par commune et si l’on veut garder quelques informations à ce niveau en n’ayant plus qu’une ligne par commune, il faudra sommer ces informations. Le package tidyverse contient deux fonctions qui permettent de passer d’un format à un autre : pivot_longer() et pivot_wider() présentés en détails ici. Nous aurons l’occasion de les utiliser ultérieurement dans ce cours. 2.2 Sélectionner un champ réduit de la base, séparer les données Manipuler une base de données, c’est aussi travailler ou créer une table réduite, surtout quand on a des données volumineuses comme ici : c’est donc choisir un champ particulier de la base. On peut par exemple choisir un champ géographique plus réduit au sein de l’Île-de-France, à partir de la commune : Paris et sa petite couronne. On peut aussi choisir de séparer les données en créant 2 tables selon l’unité statistique : l’individu ; ou le logement avec la seule personne de référence du ménage. Comme vous le savez très probablement, dans le langage tidyverse, pour faire des sélections sur les lignes ou observations dans une table de données, on utilise la fonction filter() ; pour faire des sélections sur les colonnes ou variables, on utilise la fonction select() ; pour supprimer des variables, on utilise également select() avec un “-” devant la (ou les) variable(s) à supprimer (dans le langage R de base, on peut aussi utiliser la fonction subset()). EXERCICES : Créer trois nouvelles bases selon les indications suivantes : la première que vous nommerez “RP_Paris” et qui rassemblera les données pour le seul département de Paris ; la deuxième que nous nommerez “RP_indiv” et qui comprendra les données pour les seules variables décrivant l’individu (et ce sera celle de la personne de référence du ménage) ; la troisième que vous nommerez “RP_final”, qui rassemblera les données pour les départements de Paris et de sa petite couronne, et qui comprendra toutes les variables décrivant l’individu, le logement et enfin les variables géographiques. RP_Paris &lt;- RP %&gt;% filter(DEPT == &quot;75&quot;) RP_indiv &lt;- RP %&gt;% select(&quot;AEMMR&quot;, &quot;AGED&quot;, &quot;AGER20&quot;, &quot;AGEREV&quot;,&quot;AGEREVQ&quot;,&quot;ANAI&quot;, &quot;ANEMR&quot;,&quot;APAF&quot;,&quot;COUPLE&quot;,&quot;CS1&quot;,&quot;DIPL&quot;,&quot;DNAI&quot;,&quot;EMPL&quot;, &quot;ETUD&quot;,&quot;ILETUD&quot;,&quot;ILT&quot;,&quot;IMMI&quot;,&quot;INAI&quot;,&quot;INATC&quot;,&quot;IPONDI&quot;, &quot;IRAN&quot;,&quot;LPRF&quot;,&quot;LPRM&quot;,&quot;MOCO&quot;,&quot;MODV&quot;,&quot;NA17&quot;, &quot;NA5&quot;,&quot;NAIDT&quot;,&quot;ORIDT&quot;,&quot;RECH&quot;,&quot;SEXE&quot;,&quot;STAT_CONJ&quot;, &quot;STATR&quot;,&quot;TACT&quot;,&quot;TACTD16&quot;,&quot;TP&quot;,&quot;TRANS&quot;) RP_final &lt;- RP %&gt;% filter(DEPT %in% c(&quot;75&quot;,&quot;92&quot;,&quot;93&quot;,&quot;94&quot;)) %&gt;% select(-c(&quot;NUMMI&quot;,&quot;INPERF&quot;,&quot;DEROU&quot;,&quot;LIENF&quot;,&quot;INFAM&quot;, &quot;NE17FR&quot;,&quot;INPER&quot;, &quot;NE24FR&quot;,&quot;NPERR&quot;, &quot;NE3FR&quot;, &quot;SFM&quot;, &quot;NE5FR&quot;, &quot;TYPMC&quot;, &quot;NENFR&quot;,&quot;TYPMR&quot;, &quot;NUMF&quot;,&quot;VOIT&quot;, &quot;TYPFC&quot;)) On va dorénavant travailler sur cette dernière table RP_final, on l’enregistre donc dans notre dossier “data”, ainsi que le fichier meta que nous avonhs modifié précédemments : # Enregistrement des fichiers saveRDS(object = RP_final , file = &quot;data/RP_final.Rdata&quot;) saveRDS(object = meta, file = &quot;data/meta.Rdata&quot;) "],["03-Manipulation-variables.html", "Section 3 Manipulation des variables 3.1 Manipulation des variables qualitatives 3.2 Manipulation des variables quantitatives", " Section 3 Manipulation des variables Dans la manipulation des variables, l’une des premières choses à réaliser est de les définir dans le bon format, variables quantitatives/continues ou variables qualitatives/catégorielles. On l’a vu dans la section précédente, certaines variables sont encore codées comme des nombres entiers (“integer”) alors que ce sont des variables catégorielles. On va donc corriger cela en regardant d’abord quelles variables sont concernées, en les sélectionnant avec select_if() ou select(where()) : RP_final %&gt;% select_if(is.numeric) %&gt;% names() [1] &quot;AGED&quot; &quot;AGER20&quot; &quot;AGEREV&quot; &quot;AGEREVQ&quot; &quot;ANAI&quot; &quot;CATPC&quot; [7] &quot;COUPLE&quot; &quot;CS1&quot; &quot;DEPT&quot; &quot;ETUD&quot; &quot;IMMI&quot; &quot;INAI&quot; [13] &quot;INATC&quot; &quot;IPONDI&quot; &quot;MOCO&quot; &quot;MODV&quot; &quot;NAIDT&quot; &quot;ORIDT&quot; [19] &quot;REGION&quot; &quot;SEXE&quot; &quot;STAT_CONJ&quot; &quot;TACT&quot; &quot;TACTD16&quot; A part les variables d’âge AGED et AGEREV, de date de naissance ANAI et de pondération IPONDI, toutes les autres variables devraient en format “factor”. RP_final &lt;- RP_final %&gt;% mutate(AGER20=as.factor(AGER20), AGEREVQ=as.factor(AGEREVQ), CATPC=as.factor(CATPC), COUPLE=as.factor(COUPLE), CS1=as.factor(CS1), DEPT=as.factor(DEPT), ETUD=as.factor(ETUD), IMMI=as.factor(IMMI), INAI=as.factor(INAI), INATC=as.factor(INATC), MOCO=as.factor(MOCO), MODV=as.factor(MODV), NAIDT=as.factor(NAIDT), ORIDT=as.factor(ORIDT), REGION=as.factor(REGION), SEXE=as.factor(SEXE), STAT_CONJ=as.factor(STAT_CONJ), TACT=as.factor(TACT), TACTD16=as.factor(TACTD16)) On peut ensuite vérifier que ces variables sont bien des variables facteurs en regardant combien de modalités elles ont et quelles sont-elles. Par exemple, pour la variable CATPC : nlevels(RP_final$CATPC) [1] 3 levels(RP_final$CATPC) [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; Si nous n’avions pas mis l’option transformant les variables caractères en variables facteurs lors du chargement des données, nous pourrions le faire maintenant en utilisant la fonction mutate_if ou la combinaison de mutate et across(where()) comme ceci RP %&gt;% mutate_if(is.character, as.factor) ou RP %&gt;% mutate(across(where(is.character), as.factor)). On peut enfin vérifier quelles sont les variables numériques qui restent : # RP_final %&gt;% select_if(is.numeric) %&gt;% head() %&gt;% gt() RP_final %&gt;% select(where(is.numeric)) %&gt;% head() %&gt;% gt() #ckipdaidfr table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ckipdaidfr thead, #ckipdaidfr tbody, #ckipdaidfr tfoot, #ckipdaidfr tr, #ckipdaidfr td, #ckipdaidfr th { border-style: none; } #ckipdaidfr p { margin: 0; padding: 0; } #ckipdaidfr .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ckipdaidfr .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ckipdaidfr .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ckipdaidfr .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ckipdaidfr .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ckipdaidfr .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ckipdaidfr .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ckipdaidfr .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ckipdaidfr .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ckipdaidfr .gt_column_spanner_outer:first-child { padding-left: 0; } #ckipdaidfr .gt_column_spanner_outer:last-child { padding-right: 0; } #ckipdaidfr .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ckipdaidfr .gt_spanner_row { border-bottom-style: hidden; } #ckipdaidfr .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ckipdaidfr .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ckipdaidfr .gt_from_md > :first-child { margin-top: 0; } #ckipdaidfr .gt_from_md > :last-child { margin-bottom: 0; } #ckipdaidfr .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ckipdaidfr .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ckipdaidfr .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ckipdaidfr .gt_row_group_first td { border-top-width: 2px; } #ckipdaidfr .gt_row_group_first th { border-top-width: 2px; } #ckipdaidfr .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ckipdaidfr .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ckipdaidfr .gt_first_summary_row.thick { border-top-width: 2px; } #ckipdaidfr .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ckipdaidfr .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ckipdaidfr .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ckipdaidfr .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ckipdaidfr .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ckipdaidfr .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ckipdaidfr .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ckipdaidfr .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ckipdaidfr .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ckipdaidfr .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ckipdaidfr .gt_left { text-align: left; } #ckipdaidfr .gt_center { text-align: center; } #ckipdaidfr .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ckipdaidfr .gt_font_normal { font-weight: normal; } #ckipdaidfr .gt_font_bold { font-weight: bold; } #ckipdaidfr .gt_font_italic { font-style: italic; } #ckipdaidfr .gt_super { font-size: 65%; } #ckipdaidfr .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ckipdaidfr .gt_asterisk { font-size: 100%; vertical-align: 0; } #ckipdaidfr .gt_indent_1 { text-indent: 5px; } #ckipdaidfr .gt_indent_2 { text-indent: 10px; } #ckipdaidfr .gt_indent_3 { text-indent: 15px; } #ckipdaidfr .gt_indent_4 { text-indent: 20px; } #ckipdaidfr .gt_indent_5 { text-indent: 25px; } AGED AGEREV ANAI IPONDI 72 72 1944 3.360730 59 58 1958 3.668459 30 29 1987 3.668459 82 81 1938 3.478821 86 85 1934 3.478821 1 0 2019 2.776887 Plus généralement, il est souvent d’usage d’utiliser la fonction summary() pour donner un aperçu de l’ensemble des variables, soit de leur distribution pour les variables quantitatives, soit de leur répartition par modalités pour les variables qualitatives ; la fonction permet également de nous donner l’information sur l’existence et le nombre de valeurs manquantes pour chaque variable. summary(RP_final) CANTVILLE ACHLR AEMMR AGED 75ZZ : 853167 3 :687155 9 :2032861 Min. : 0.00 9296 : 47490 4 :656626 8 : 286192 1st Qu.: 21.00 9398 : 43375 2 :314367 7 : 146463 Median : 36.00 9399 : 43104 1 :303570 6 : 91377 Mean : 38.44 9499 : 37585 6 :301595 Z : 34562 3rd Qu.: 55.00 9299 : 36678 5 :270547 5 : 30169 Max. :120.00 (Other):1574634 (Other):102173 (Other): 14409 AGER20 AGEREV AGEREVQ ANAI 54 :515753 Min. : 0.0 25 : 226438 Min. :1896 39 :412404 1st Qu.: 20.0 30 : 214781 1st Qu.:1963 64 :273384 Median : 36.0 35 : 197623 Median :1981 79 :263157 Mean : 37.5 20 : 186496 Mean :1980 29 :226438 3rd Qu.: 54.0 40 : 181466 3rd Qu.:1997 24 :186496 Max. :119.0 0 : 177322 Max. :2020 (Other):758401 (Other):1451907 ANEMR APAF ARM ASCEN BAIN 01 :655689 3 :777547 ZZZZZ :1782866 1:1460332 X: 34562 03 :564056 0 :643516 75115 : 90717 2:1141139 Z:2601471 02 :542791 2 :620004 75118 : 78739 Z: 34562 00 :317238 1 :539040 75120 : 75863 04 :256066 Z : 34562 75119 : 73388 05 :140210 6 : 8547 75113 : 70196 (Other):159983 (Other): 12817 (Other): 464264 BATI CATIRIS CATL CATPC CHAU CHFL X: 34562 A: 29884 1:2601471 0:2601471 X: 34562 1:1370090 Z:2601471 D: 1488 Z: 34562 1: 26328 Z:2601471 2: 654195 H:2597963 2: 8234 3: 563224 X: 988 4: 13962 Z: 5710 X: 34562 CHOS CLIM CMBL COUPLE CS1 CUIS X: 34562 X: 34562 1: 583799 1:1091726 8 :903563 X: 34562 Z:2601471 Z:2601471 2:1060384 2:1544307 3 :457534 Z:2601471 3: 117844 7 :374763 4: 764429 5 :343737 5: 7861 4 :323394 6: 67154 6 :162434 X: 34562 (Other): 70608 DEPT DIPL DNAI EAU EGOUL 75:853167 18 :486255 99 :716703 X: 34562 X: 34562 92:621663 ZZ :465748 75 :538277 Z:2601471 Z:2601471 93:629049 17 :280471 92 :262709 94:532154 13 :252762 93 :241894 14 :252350 94 :185218 16 :197267 78 : 37782 (Other):701180 (Other):653450 ELEC EMPL ETUD GARL HLML X: 34562 ZZ :1432384 1: 689558 1:1286127 1: 784089 Z:2601471 16 : 913146 2:1946475 2:1315344 2:1817382 15 : 104235 Z: 34562 Z: 34562 21 : 86275 22 : 48699 11 : 25485 (Other): 25809 ILETUD ILT IMMI INAI INATC Z :1946475 Z :1432384 1: 614842 1:738724 1:2180430 1 : 484682 3 : 533246 2:2021191 2:614762 2: 455603 3 : 114507 1 : 449857 3:518740 2 : 76273 2 : 204924 4: 45574 4 : 13812 4 : 12853 5: 1530 5 : 167 7 : 2524 6:716703 (Other): 117 (Other): 245 IPONDI IRAN IRIS LPRF Min. : 0.000 1 :2305666 920120303: 6961 0:643516 1st Qu.: 1.103 2 : 112053 ZZZZZZZZZ: 5710 1:654441 Median : 2.933 4 : 69107 930700109: 5523 2:517420 Mean : 2.596 3 : 40599 751187110: 4104 3:762238 3rd Qu.: 3.404 Z : 38020 920360501: 3818 4: 17410 Max. :30.057 5 : 34401 751176714: 3807 5: 6446 (Other): 36187 (Other) :2606110 Z: 34562 LPRM METRODOM MOCO MODV 1 :1209833 M:2636033 22 :585580 32 :585580 3 : 763890 11 :569579 11 :569579 2 : 513339 32 :526421 50 :321174 8 : 38136 21 :449260 40 :291436 Z : 34562 12 :216515 12 :216515 6 : 32123 23 :137021 20 :205247 (Other): 44150 (Other):151657 (Other):446502 NA17 NA5 NAIDT NBPI ZZ :1432384 AZ: 626 0 :1872226 03 :773582 OQ : 316215 BE: 68660 30 : 716703 04 :628152 MN : 223963 FZ: 50464 11 : 18616 02 :491816 GZ : 129585 GU: 767684 12 : 16979 05 :284228 JZ : 101100 OQ: 316215 14 : 5933 01 :263674 KZ : 78928 ZZ:1432384 13 : 3526 06 : 97433 (Other): 353858 (Other): 2050 (Other): 97148 ORIDT RECH REGION SANI SANIDOM 0 :2570233 0: 595136 11:2636033 0: 17248 XX: 34562 11 : 26547 1: 99394 1: 148161 ZZ:2601471 12 : 23668 2: 81634 2:2436062 14 : 8155 9: 189296 X: 34562 13 : 4671 Z:1670573 18 : 908 (Other): 1851 SEXE STAT_CONJ STATR STOCD SURF TACT 1:1263098 1: 806273 1:1067681 10:992691 4 :736488 11:1203649 2:1372935 2: 90782 2: 135968 21:627380 3 :583150 12: 179713 3: 229555 Z:1432384 22:757862 5 :440798 21: 382445 4: 101992 23:151152 1 :239343 22: 240715 5: 137488 30: 72386 2 :233363 23: 465748 6:1269943 ZZ: 34562 6 :189749 24: 64030 (Other):213142 25: 99733 TACTD16 TP TRANS TRIRIS TYPC 111 :1127202 1:1026823 1: 39223 ZZZZZZ : 47639 1: 259226 230 : 465748 2: 176826 2: 102898 931411 : 10563 2: 194433 210 : 382445 Z:1432384 3: 40772 920331 : 8408 3:2124270 220 : 240715 4: 44362 931071 : 8032 4: 22451 122 : 127564 5: 311836 940721 : 7834 5: 1091 250 : 99733 6: 664558 921011 : 7686 Z: 34562 (Other): 192626 Z:1432384 (Other):2545871 TYPL WC 1: 330946 X: 34562 2:2220098 Z:2601471 3: 25394 4: 15607 5: 1942 6: 7484 Z: 34562 Mais attention, le problème ici est que cela nous donne des fréquences non pondérées pour l’ensemble de nos variables qualitatives, donc qui n’ont finalement pas grand sens. 3.1 Manipulation des variables qualitatives On peut d’abord travailler sur les variables qualitatives qui correspondent ici à l’essentiel de nos variables. Comme on le sait, on peut regarder les différents niveaux pour chacune d’entre elles, avec la fonction levels(). Si on veut appliquer la fonction à l’ensemble de nos variables facteurs sans avoir donc à les indiquer une par une, on peut avoir recours à la fonction sapply() qui permet d’appliquer la fonction indiquée entre parenthèses (ici levels()) à tous les éléments de notre table de données. # Pour info, ici cela s&#39;écrirait : RP_final %&gt;% select(where(is.factor)) %&gt;% sapply(levels) # on peut même se passer de la sélection sur les variables : # RP %&gt;% sapply(levels) On peut ensuite vouloir retravailler les modalités de ces variables, car par exemple les modalités ne sont pas parlantes puisque nommées par des codes chiffres, ou parce que les modalités sont trop nombreuses et qu’on souhaiterait les rassembler pour une analyse ultérieure. Par exemple, si l’on veut étudier la répartition de la population francilienne selon leur statut d’activité, on peut utiliser la variable TACT: levels(RP_final$TACT) [1] &quot;11&quot; &quot;12&quot; &quot;21&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; &quot;25&quot; Mais le moins qu’on puisse dire c’est que les 7 modalités de cette variable ne sont pas parlantes, on peut donc recoder les modalités de cette variable dans une étape préalable DATA comme ici ; on pourra bien sûr enchaîner plus tard les lignes de codes et réaliser cette étape dans une même procédure avec le tableau ou le graphique représentant cette variable. Commençons ici par l’étape DATA : # On cherche à quoi correspondent les modalités chiffrées de cette variable # dans le fichier &quot;meta&quot; meta %&gt;% filter(COD_VAR==&quot;TACT&quot;) %&gt;% select(COD_MOD, LIB_MOD) # A tibble: 7 × 2 COD_MOD LIB_MOD &lt;fct&gt; &lt;fct&gt; 1 11 Actifs ayant un emploi, y compris sous apprentissage ou en stage rému… 2 12 Chômeurs 3 21 Retraités ou préretraités 4 22 Élèves, étudiants, stagiaires non rémunéré de 14 ans ou plus 5 23 Moins de 14 ans 6 24 Femmes ou hommes au foyer 7 25 Autres inactifs # On recode à partir de ces libellés, tout en regroupant certaines modalités # qui sont très spécifiques et nous intéressent moins : RP_final &lt;- RP_final %&gt;% mutate(TACT_moda = as.factor( case_when(TACT == &quot;11&quot; ~ &quot;Actifs en emploi&quot;, TACT == &quot;12&quot; ~ &quot;Chômeurs&quot;, TACT == &quot;21&quot; ~ &quot;Retraités&quot;, TACT %in% c(&quot;22&quot;,&quot;23&quot;,&quot;24&quot;,&quot;25&quot;) ~ &quot;Autres inactifs&quot;))) levels(RP_final$TACT_moda) [1] &quot;Actifs en emploi&quot; &quot;Autres inactifs&quot; &quot;Chômeurs&quot; &quot;Retraités&quot; Si l’on veut changer l’ordre des modalités, qui s’afficheront comme ci-dessus dans un tableau ou un graphique, on peut utiliser la fonction fct_relevel() du package forcats (à installer avant puis à appeler avant de l’utiliser) : # install.package(&quot;forcats&quot;) library(forcats) RP_final &lt;- RP_final %&gt;% mutate(TACT_moda = fct_relevel(TACT_moda, c(&quot;Actifs en emploi&quot;,&quot;Chômeurs&quot;,&quot;Retraités&quot;, &quot;Autres inactifs&quot;))) levels(RP_final$TACT_moda) [1] &quot;Actifs en emploi&quot; &quot;Chômeurs&quot; &quot;Retraités&quot; &quot;Autres inactifs&quot; Plus largement, pour travailler sur des variables qualitatives en particulier lorsqu’elles sont en format facteur, le package forcats est très utile. Outre une fonction de transformation d’une variable caractère en facteur (as_factor() proche de la version de baseR as.factor() utilisée en début de section), elle contient plein d’autres fonctions : fct_collapse() utilisée pour renommer ou regrouper des modalités d’une variable (au lieu de la double fonction as.factor() et case_when()) ; fct_relevel() utilisée également au-dessus pour trier les modalités comme on le souhaite ; fct_drop() pour enlever des niveaux de facteurs vides/sans effectifs ; fct_explicit_na() pour rendre les NA explicites en créant une modalité “(missing)” ; fct_reorder() et fct_reorder2() pour réordonner les modalités d’une variable, très utile pour les graphiques car utilisables directement dans ggplot() ; fct_lump() pour regrouper les modalités les plus communes (ou au contraire les moins communes) en lui indiquant entre parenthèses le nombre n= de modalités souhaitées ou la proportion minimum souhaitée prop=, et en sélectionnant la variable avec la fonction pull() avant car elle doit être en format vecteur et non data.frame ; ou encore fct_recode() pour changer le niveau des facteurs ; fct_other() ; fct_infreq() et fct_inorder() ; etc. Un bon récapitulatif de ces fonctions est présenté ici. 3.2 Manipulation des variables quantitatives Comme nous l’avons vu plus haut, il y a peu de variables quantitatives dans cette base et l’une d’entre elles est la pondération, donc on va regarder plus précisément la variable AGED. Cependant, celle-ci aussi est particulière car c’est une variable numérique constituée d’entiers naturels (et non de valeurs réelles) qui vont de 0 à 120 ; dans le fichier des métadonnées (ou le dictionnaire des variables disponible également sur le site de l’Insee), on se rend compte que la variable a été pensée comme catégorielle avec des modalités d’abord codées comme “000”, “001”, etc. meta %&gt;% filter(COD_VAR==&quot;AGED&quot;) %&gt;% select(COD_MOD, LIB_MOD) %&gt;% tail() # A tibble: 6 × 2 COD_MOD LIB_MOD &lt;fct&gt; &lt;fct&gt; 1 115 115 ans 2 116 116 ans 3 117 117 ans 4 118 118 ans 5 119 119 ans 6 120 120 ans On peut alors regarder rapidement la distribution de cette variable. summary(RP_final$AGED) Min. 1st Qu. Median Mean 3rd Qu. Max. 0.00 21.00 36.00 38.44 55.00 120.00 On peut aussi construire des variables continues en agrégeant certaines informations au niveau des communes par exemple. Reprenons la variable d’activité dont nous avons recoder et regrouper les modalités et calculons-là pour avoir le nombre de chaque modalité par commune. Il faut pour cela créer la variable de commune, qu’on appelera COM, à partir de l’IRIS : RP_final &lt;- RP_final %&gt;% mutate(COM=substr(IRIS, 1, 5)) On va ensuite sommer chaque modalité de la variable TACT_moda en utilisant la pondération en groupant par commune. EXERCICE : Créer donc un tableau qui aura 3 colonnes COM, TACT_moda et n. Vous pouvez utiliser les fonctions group_by suivi soit de count, soit de summarise ; on cherchera finalement à arrondir ces valeurs à l’unité avec la fonction round(). Vous devez obtenir le tableau suivant : Tab_com_TACT &lt;- RP_final %&gt;% group_by(COM) %&gt;% count(TACT_moda, wt=IPONDI) %&gt;% mutate(n=round(n)) # RP_final %&gt;% group_by(COM, TACT_moda) %&gt;% # summarise(n=sum(IPONDI)) %&gt;% # mutate(n=round(n)) On voit qu’on a un tableau dans un format “long” puisqu’il y a plusieurs observations pour une seule commune. On va utiliser la fonction pivot_wider() mentionnée précédemment pour n’avoir qu’une ligne par commune et en colonne les types de statut avec leur nombre respectif. Tab_com_TACT &lt;- Tab_com_TACT %&gt;% pivot_wider(names_from = TACT_moda, values_from = n) Tab_com_TACT # A tibble: 137 × 5 COM `Actifs en emploi` Chômeurs Retraités `Autres inactifs` &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 75101 8366 941 2630 3979 2 75102 13118 1378 2148 4964 3 75103 19239 2085 4589 8123 4 75104 15227 1863 4508 7513 5 75105 27378 2611 10607 17618 6 75106 18073 1842 8180 12176 7 75107 23394 2165 9573 13735 8 75108 18254 1565 5297 10534 9 75109 34155 3482 7264 15125 10 75110 46454 6343 10645 23078 # ℹ 127 more rows 3.2.1 Détecter et “visualiser” les valeurs manquantes Pour travailler sur les valeurs manquantes et valeurs aberrantes de variables quantitatives, on va s’appuyer sur une autre base de données, plus pertinente pour cela. Vous la trouverez sur l’espace de cours sur Moodle : il s’agit d’une extraction de la base des données de valeurs foncières pour le seul département de Paris et la vente d’appartements entre 2019 et 2022. Une fois copiée dans le dossier “data/” de notre projet, ouvrons cette base de données et commençons l’exploration des variables de cette base et de leurs valeurs manquantes : dvf_Paris &lt;- readRDS(file =&quot;data/dvf_Paris.Rdata&quot;) dvf_Paris %&gt;% head() %&gt;% gt() #nxaktkerkz table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #nxaktkerkz thead, #nxaktkerkz tbody, #nxaktkerkz tfoot, #nxaktkerkz tr, #nxaktkerkz td, #nxaktkerkz th { border-style: none; } #nxaktkerkz p { margin: 0; padding: 0; } #nxaktkerkz .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #nxaktkerkz .gt_caption { padding-top: 4px; padding-bottom: 4px; } #nxaktkerkz .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #nxaktkerkz .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #nxaktkerkz .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nxaktkerkz .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nxaktkerkz .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nxaktkerkz .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #nxaktkerkz .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #nxaktkerkz .gt_column_spanner_outer:first-child { padding-left: 0; } #nxaktkerkz .gt_column_spanner_outer:last-child { padding-right: 0; } #nxaktkerkz .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #nxaktkerkz .gt_spanner_row { border-bottom-style: hidden; } #nxaktkerkz .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #nxaktkerkz .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #nxaktkerkz .gt_from_md > :first-child { margin-top: 0; } #nxaktkerkz .gt_from_md > :last-child { margin-bottom: 0; } #nxaktkerkz .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #nxaktkerkz .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #nxaktkerkz .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #nxaktkerkz .gt_row_group_first td { border-top-width: 2px; } #nxaktkerkz .gt_row_group_first th { border-top-width: 2px; } #nxaktkerkz .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nxaktkerkz .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #nxaktkerkz .gt_first_summary_row.thick { border-top-width: 2px; } #nxaktkerkz .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nxaktkerkz .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nxaktkerkz .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #nxaktkerkz .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #nxaktkerkz .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #nxaktkerkz .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nxaktkerkz .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nxaktkerkz .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nxaktkerkz .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nxaktkerkz .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nxaktkerkz .gt_left { text-align: left; } #nxaktkerkz .gt_center { text-align: center; } #nxaktkerkz .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #nxaktkerkz .gt_font_normal { font-weight: normal; } #nxaktkerkz .gt_font_bold { font-weight: bold; } #nxaktkerkz .gt_font_italic { font-style: italic; } #nxaktkerkz .gt_super { font-size: 65%; } #nxaktkerkz .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #nxaktkerkz .gt_asterisk { font-size: 100%; vertical-align: 0; } #nxaktkerkz .gt_indent_1 { text-indent: 5px; } #nxaktkerkz .gt_indent_2 { text-indent: 10px; } #nxaktkerkz .gt_indent_3 { text-indent: 15px; } #nxaktkerkz .gt_indent_4 { text-indent: 20px; } #nxaktkerkz .gt_indent_5 { text-indent: 25px; } id_mutation date_mutation nature_mutation valeur_fonciere code_postal id_parcelle lot1_numero lot1_surface_carrez lot2_numero lot2_surface_carrez lot3_numero lot3_surface_carrez lot4_numero lot4_surface_carrez lot5_numero lot5_surface_carrez nombre_lots type_local surface_reelle_bati nombre_pieces_principales surface_terrain px_m2 annee date_moisan 2022-1621602 2022-01-04 Vente 580000 75018 75118000BR0026 55 61.00 58 NA 8 NA NA NA NA NA 3 Appartement 25 2 NA 23200.00 2022 2022-01 2022-1621602 2022-01-04 Vente 580000 75018 75118000BR0026 25 NA 56 61.00 NA NA NA NA NA NA 2 Appartement 20 2 NA 29000.00 2022 2022-01 2022-1621603 2022-01-06 Vente 605000 75003 75103000AH0072 7 40.66 NA NA NA NA NA NA NA NA 1 Appartement 42 3 NA 14404.76 2022 2022-01 2022-1621606 2022-01-05 Vente 716250 75009 75109000AC0148 24 NA 3 66.26 38 NA NA NA NA NA 3 Appartement 69 3 NA 10380.43 2022 2022-01 2022-1621607 2022-01-05 Vente 320000 75010 75110000AG0047 27 NA 92 35.19 NA NA NA NA NA NA 2 Appartement 33 2 NA 9696.97 2022 2022-01 2022-1621608 2022-01-07 Vente 320000 75020 75120000AX0021 298 32.52 50 NA NA NA NA NA NA NA 2 Appartement 29 1 NA 11034.48 2022 2022-01 summary(dvf_Paris) id_mutation date_mutation nature_mutation valeur_fonciere Length:178526 Min. :2019-01-02 Length:178526 Min. : 0 Class :character 1st Qu.:2020-05-18 Class :character 1st Qu.: 285000 Mode :character Median :2021-06-11 Mode :character Median : 480000 Mean :2021-03-14 Mean : 1966869 3rd Qu.:2021-12-30 3rd Qu.: 887825 Max. :2022-10-27 Max. :606210300 NA&#39;s :2183 code_postal id_parcelle lot1_numero lot1_surface_carrez Min. :75001 Length:178526 Min. : 1.0 Min. : 0.50 1st Qu.:75011 Class :character 1st Qu.: 14.0 1st Qu.: 26.00 Median :75014 Mode :character Median : 29.0 Median : 40.33 Mean :75013 Mean : 155.2 Mean : 70.41 3rd Qu.:75017 3rd Qu.: 104.0 3rd Qu.: 64.52 Max. :75020 Max. :100226.0 Max. :9532.00 NA&#39;s :2 NA&#39;s :15112 NA&#39;s :85770 lot2_numero lot2_surface_carrez lot3_numero lot3_surface_carrez Min. : 2.0 Min. : 0.61 Min. : 2.0 Min. : 1.00 1st Qu.: 23.0 1st Qu.: 34.04 1st Qu.: 21.0 1st Qu.: 40.59 Median : 48.0 Median : 51.50 Median : 42.0 Median : 68.18 Mean : 222.7 Mean : 61.06 Mean : 108.6 Mean : 84.22 3rd Qu.: 111.0 3rd Qu.: 75.00 3rd Qu.: 77.0 3rd Qu.:114.67 Max. :21037.0 Max. :7392.00 Max. :11218.0 Max. :685.00 NA&#39;s :88589 NA&#39;s :151775 NA&#39;s :165304 NA&#39;s :176278 lot4_numero lot4_surface_carrez lot5_numero lot5_surface_carrez Min. : 2.00 Min. : 1.30 Min. : 2.00 Min. : 10.52 1st Qu.: 21.00 1st Qu.: 44.91 1st Qu.: 24.00 1st Qu.: 50.75 Median : 44.00 Median : 67.39 Median : 45.00 Median : 74.10 Mean : 99.02 Mean : 82.44 Mean : 90.05 Mean : 95.80 3rd Qu.: 78.00 3rd Qu.:108.13 3rd Qu.: 77.00 3rd Qu.:121.34 Max. :7815.00 Max. :427.60 Max. :4262.00 Max. :345.26 NA&#39;s :174098 NA&#39;s :178049 NA&#39;s :176870 NA&#39;s :178411 nombre_lots type_local surface_reelle_bati Min. : 0.000 Length:178526 Min. : 1.0 1st Qu.: 1.000 Class :character 1st Qu.: 28.0 Median : 2.000 Mode :character Median : 42.0 Mean : 1.537 Mean : 53.1 3rd Qu.: 2.000 3rd Qu.: 67.0 Max. :27.000 Max. :861.0 NA&#39;s :1 nombre_pieces_principales surface_terrain px_m2 Min. : 0.00 Min. : 19.0 Min. : 0 1st Qu.: 1.00 1st Qu.: 231.0 1st Qu.: 9219 Median : 2.00 Median : 395.0 Median : 11040 Mean : 2.41 Mean : 820.7 Mean : 45437 3rd Qu.: 3.00 3rd Qu.: 615.0 3rd Qu.: 13750 Max. :22.00 Max. :6173.0 Max. :46631562 NA&#39;s :1 NA&#39;s :163485 NA&#39;s :2184 annee date_moisan Length:178526 Length:178526 Class :character Class :character Mode :character Mode :character La fonction summary() permet en effet de donner une première information sur les valeurs manquantes des différentes variables. Pour se concentrer sur cette seule information, on peut compter le nombre de valeurs manquantes NA pour chacune des variables avec la fonction colSums() ; pour les avoir en proportion du nombre total d’observations (lignes), on peut utiliser la fonction colMeans() ; sinon ; on peut utiliser la fonction summarise combinée avec across(where()), ) : colSums(is.na(dvf_Paris)) id_mutation date_mutation nature_mutation 0 0 0 valeur_fonciere code_postal id_parcelle 2183 2 0 lot1_numero lot1_surface_carrez lot2_numero 15112 85770 88589 lot2_surface_carrez lot3_numero lot3_surface_carrez 151775 165304 176278 lot4_numero lot4_surface_carrez lot5_numero 174098 178049 176870 lot5_surface_carrez nombre_lots type_local 178411 0 0 surface_reelle_bati nombre_pieces_principales surface_terrain 1 1 163485 px_m2 annee date_moisan 2184 0 0 # Pour les avoir en proportion par rapport au nombre total d&#39;observations # et arrondies à 2 chiffres après la virgule : round(colMeans(is.na(dvf_Paris)*100), 2) id_mutation date_mutation nature_mutation 0.00 0.00 0.00 valeur_fonciere code_postal id_parcelle 1.22 0.00 0.00 lot1_numero lot1_surface_carrez lot2_numero 8.46 48.04 49.62 lot2_surface_carrez lot3_numero lot3_surface_carrez 85.02 92.59 98.74 lot4_numero lot4_surface_carrez lot5_numero 97.52 99.73 99.07 lot5_surface_carrez nombre_lots type_local 99.94 0.00 0.00 surface_reelle_bati nombre_pieces_principales surface_terrain 0.00 0.00 91.57 px_m2 annee date_moisan 1.22 0.00 0.00 # Ou en langage tidyverse sur les seules variables numériques : dvf_Paris %&gt;% summarise(across(where(is.numeric), ~ sum(is.na(.)))) # A tibble: 1 × 17 valeur_fonciere code_postal lot1_numero lot1_surface_carrez lot2_numero &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 2183 2 15112 85770 88589 # ℹ 12 more variables: lot2_surface_carrez &lt;int&gt;, lot3_numero &lt;int&gt;, # lot3_surface_carrez &lt;int&gt;, lot4_numero &lt;int&gt;, lot4_surface_carrez &lt;int&gt;, # lot5_numero &lt;int&gt;, lot5_surface_carrez &lt;int&gt;, nombre_lots &lt;int&gt;, # surface_reelle_bati &lt;int&gt;, nombre_pieces_principales &lt;int&gt;, # surface_terrain &lt;int&gt;, px_m2 &lt;int&gt; Le moins qu’on puisse dire c’est qu’il y a des valeurs manquantes, mais dont le nombre et la proportion (par rapport au nombre total d’observations) varie énormément. Pour en faire une analyse plus poussée, différents packages existent pour détecter et visualiser ces données manquantes. L’un d’entre eux est le package naniar : quelques fonctions permettent d’abord de décrire la base selon ses valeurs manquantes. Cela donne un aperçu global et rapide, mais cela n’est vraiment pas suffisant pour comprendre l’origine et les enjeux (possibles problèmes) de ces valeurs manquantes. library(naniar) # Ci-dessous : nombre de cellules du tableau ou de n_ij d&#39;une matrice # qui correspondent à des valeurs manquantes : n_miss(dvf_Paris) [1] 1558112 # Pour les avoir en proportion du nombre total de cellules du tableau # et non des seules lignes comme précédemment, # le résultat est déjà en pourcentage, sinon utiliser `prop_miss(RP)`) pct_miss(dvf_Paris) [1] 36.3652 # Ci-dessous : nombre de cellules du tableau ou de n_ij d&#39;une matrice # qui correspondent à des valeurs renseignées : n_complete(dvf_Paris) [1] 2726512 #en proportion pct_complete(dvf_Paris) [1] 63.6348 On peut ensuite visualiser le nombre de valeurs manquantes par variable, avec la fonction gg_miss_var() du même package. On peut également demander dans gg_miss_var() à ce que les valeurs soient en pourcentage, avec l’argument show_pct=TRUE. # 1er type de visualisation des valeurs manquantes dvf_Paris %&gt;% gg_miss_var() On peut aussi réaliser des graphiques montrant le nombre de valeurs manquantes pour l’ensemble des variables numériques de la base, en fonction d’une autre variable (y compris de nature ‘factor’), avec l’argument fct= dans gg_miss_fct(). Cela est intéressant pour voir si certaines valeurs manquantes des variables sont liées à des valeurs observées d’autres variables, qu’elles soient quantitatives ou qualitatives (et dans ce cas, est-ce que les valeurs manquantes se retrouvent davantage dans certaines modalités plus que d’autres ?). Par exemple, ici, selon le type de lots, ou la surface du logement : # on filtre sur les variables numériques car on ne veut pas que la sortie nous affiche des variables comme le code postal. dvf_Paris %&gt;% select(where(is.numeric), nombre_lots) %&gt;% gg_miss_fct(fct = nombre_lots) dvf_Paris %&gt;% select(where(is.numeric), -(code_postal)) %&gt;% filter(surface_reelle_bati&lt;250) %&gt;% gg_miss_fct(fct = surface_reelle_bati) On voit que les valeurs manquantes sont plus nombreuses pour les variables de numéro et surface carrez des lots 2, 3, 4 et 5 en proportion du nombre de lots, ou encore on observe qu’il y a un petit peu de valeurs manquantes pour les variables de prix au m2 ou de valeur foncière quant le nombre de lots est égal à 0. Elles ne se distribuent donc pas de manière uniforme selon la variable du nombre de lots, mais c’est assez logique ici et on comprend mieux les nombreuses valeurs manquantes pour les variables indiqués “lot2”, “lot3”, etc, car s’il n’y a qu’un ou deux lots c’est normal qu’il n’y ait pas d’informations sur ces variables. En revanche, on note que même avec 0 lot, on peut avoir l’information sur la surface, le prix/la valeur foncière, puisque ce n’est pas toujours manquant. Plus généralement, la fonction gg_miss_upset() de ce même package naniar permet de visualiser des dépendances entre les valeurs manquantes des variables : dvf_Paris %&gt;% select(where(is.numeric)) %&gt;% gg_miss_upset() Cela nous montre qu’il y a beaucoup d’observations où on a des valeurs manquantes pour 5 variables indiquées, qu’ensuite le cas le plus probable c’est des valeurs manquantes pour 4 de ces 5 variables, etc. Enfin, il est possible d’appliquer la fonction geom_miss_point() à une fonction ggplot, dans ce cas les valeurs manquantes de la ou des variables sont remplacées par des valeurs 10% plus basses que la valeur minimum observée des variables, et cela afin de les visualiser. Il existe bien sûr bien d’autres packages, comme funModeling, Amelia et sa fonction missmap(), ou encore visdat et sa fonction vis_miss(). Enfin, d’autres packages comme VIM ou MICE permettent, non seulement de visualiser ces valeurs manquantes, mais également de leur appliquer des techniques pour les “gérer”, c’est ce que l’on va voir maintenant en résumé. 3.2.2 Gérer les valeurs manquantes Il est bien de connaître le nombre et la proportion de valeurs manquantes dans nos données, comment ces dernières se répartissent entre elles, etc., mais il faut aussi comprendre quel impact elles peuvent avoir sur des analyses statistiques, de régressions ou autres algorithmes. Dans une base de données tirée d’une enquête, les valeurs manquantes peuvent provenir d’une non-réponse de la part de l’enquêté (que ce soit un individu ou une entreprise), cette non-réponse pouvant être “totale” (on a aucune donnée pour cet enquêté alors qu’il fait partie de l’échantillon) ou “partielle” (on a une partie des réponses mais pas à toutes les questions et donc des variables parfois avec des valeurs manquantes) ; ou bien encore elles peuvent être dues à une mauvaise saisie de l’information par l’enquêteur. La pondération, si elle est présente dans une enquête, peut permettre de corriger cette non-réponse totale, voire partielle. Les conséquences des valeurs manquantes dans une base de données dépendent de plusieurs choses : on doit d’abord se demander si l’information perdue aurait été pertinente et/ou aurait apporté un élément particulier/supplémentaire. Ensuite, la perte éventuelle d’information est-elle importante, en nombre/en proportion. Et enfin (et surtout), peut-elle créer un biais lors de l’estimation et précision du phénomène que l’on souhaite observer, décrire, analyser, etc. Selon l’importance de ces conséquences, il faut traiter ces valeurs manquantes, c’est-à-dire utiliser une procédure la plus adaptée possible selon le potentiel biais repéré. Traditionnellement dans la littérature, on distingue 3 types de valeurs manquantes : valeur manquante entièrement due au hasard (‘MCAR’ pour Missing completely at random) : il n’y a pas de lien entre la valeur manquante pour une variable donnée et les autres variables, dit autrement la probabilité pour une variable qu’elle ait une valeur manquante est constante dans les données, elle ne diffère pas selon d’autres caractéristiques des individus ; valeur manquante due au hasard (‘MAR’ pour Missing at random) : il y a un lien entre la valeur manquante pour une variable donnée et les valeurs observées d’autres variables, c’est-à-dire que la probabilité pour une variable qu’elle ait une valeur manquante dépend d’autres variables (de leurs valeurs observées), elle ne sera donc pas la même selon les individus, c’est ce qu’on essayait de regarder lorsqu’on a utilisé plus haut la fonction gg_miss_fct(fct=) ; valeur ne manquant pas au hasard (‘NMAR’ pour Non missing at random) : il y a un lien entre la valeur manquante pour une variable et les valeurs manquantes/non observées d’autres variables. Ce sont celles qui risquent d’entraîner des biais importants si on ne les traite pas, c’est ce qu’on essayait de regarder plus haut également avec la fonction gg_miss_upset() cette fois. Comment alors les gérer ? En pratique, il est d’usage lorsque la proportion de valeurs manquantes ne dépasse pas 5% des données de ne rien faire de particulier ou simplement de les supprimer (vous pouvez pour la savoir utiliser les premières fonctions du package naniar présentées précédemment). Sinon, on essaye d’appliquer plusieurs méthodes, simples ou plus complexes. Dans le cas de valeurs manquantes entièrement dues au hasard (MCAR) et/ou d’une faible proportion des valeurs manquantes dans le total de la table de données, on peut décider de supprimer toutes les lignes qui contiennent au moins une valeur manquante, afin d’avoir une table de données complètes, on peut utiliser la fonction na.omit() ou complete.cases() ; attention à ne pas remplacer votre table de données initiale en réalisant cette procédure. On ne va pas s’essayer à le faire ici car on a vu au tout début de cette section que pour certaines variables cela concernait pratiquement toutes les observations (ici les ventes observées), la conséquence c’est qu’ici on va supprimer toutes les lignes car une ligne a forcément une valeur manquante dans une des variables. Le code serait celui-ci : dvf_Paris_sansNA &lt;- na.omit(dvf_Paris) # OU : # dvf_Paris_sansNA &lt;- dvf_Paris[complete.cases(dvf_Paris), ] Des techniques d’imputation simple peuvent également être utilisées. On peut par exemple remplacer les valeurs manquantes d’une variable quantitative par sa moyenne ou sa médiane, pour cela on peut utiliser la fonction replace_na() du package tidyr, ou impute() du package Hmisc, ou encore na.aggregate() du package zoo On donne ainsi une valeur “artificielle” pour remplacer la valeur manquante. Dans le cas de variables qualitatives, on peut, de même, imputer la modalité dominante (avec la fonction mode() du package Hmisc ; ou avec l’argument mode= du package zoo). Par exemple, voici les codes pour remplacer les valeurs manquantes de la variable ‘pxm2’ par sa médiane (la base n’étant pas propre il vaut mieux utiliser la médiane que la moyenne) : dvf_Paris %&gt;% mutate(px_m2_bis = replace_na(px_m2, median(px_m2, na.rm=TRUE))) %&gt;% select(px_m2, px_m2_bis) %&gt;% filter(is.na(px_m2)) library(Hmisc) dvf_Paris$px_m2_bis &lt;- with(dvf_Paris, impute(px_m2, median)) library(zoo) dvf_Paris$px_m2_bis &lt;- na.aggregate(dvf_Paris$ px_m2, FUN = median) On peut néanmoins réaliser ce type d’imputation simple de manière un petit peu plus subtile. Par exemple, si la moyenne de la variable diffère sensiblement selon une autre variable (catégorielle), dans ce cas, on va plutôt remplacer les valeurs manquantes de la variable selon la moyenne associée à chaque modalité de cette autre variable en ajoutant un group_by() avant la fonction mutate() si on utilise la fonction replace_na() comme dans l’exemple précédent. Si on ne veut pas supprimer ces lignes d’observations et perdre ainsi d’autres informations (celles des variables pour lesquelles la valeur était renseignée pour cette même observation), on peut simplement créer une variable indicatrice de valeur manquante, remplacer les NA par ‘999’ comme dans notre base de données actuelle pour des variables quantitatives, ou par une modalité ‘Manquant’ ou ‘Missing’ pour des variables qualitatives. Plusieurs autres méthodes existent également dans le cas de valeurs manquantes dues au hasard (MAR), en voici la liste pour information et sans prétention d’exhaustivité : - analyse pondérée pour des valeurs MAR qui consiste à calculer la probabilité qu’une observation soit complète et ensuite à affecter à chacune des observations complètes, un poids inversement proportionnel à cette probabilité ; - imputation de la dernière observation pour des données temporelles ; - imputation “hot-deck” qui consiste à remplacer la valeur manquante par une valeur observée chez un autre individu ayant les mêmes caractéristiques, ou “cold-deck” (même démarche que précédement, sauf que la valeur imputée vient d’une autre source) ; - imputation par le “plus proche voisin” en utilisant une fonction de distance basée sur plusieurs autres variables/caractéristiques de l’individu ; - imputation par un modèle de régression où l’on va remplacer la valeur manquante par une valeur prédite obtenue par régression sur données complètes de la variable comportant des valeurs manquantes. Il y a aussi des techniques plus complextes d’imputation multiple qui consiste à créer plusieurs valeurs possibles pour une valeur manquante d’une variable, cela peut être adaptée là aussi lorsque les valeurs manquantes sont dues au hasard (MAR). Vous trouverez de multiples ressources sur internet dans des ouvrages libres d’accès, ou vous pouvez aller voir un des chapitres de l’ouvrage principal support du cours (Husson, 2018), avec des exemples d’utilisation. 3.2.3 Détecter et “visualiser” les valeurs aberrantes On va continuer avec cette base de données en se concentrant sur les variables de valeur foncière, de surface, de nombre de pièces, etde prix au m2, en s’intéressant maintenant aux valeurs aberrantes. On peut d’abord étudier la distribution de ces variables : la fonction get_summary_stats() du package rstatix permet de donner les statistiques de distribution des variables, on propose d’afficher les principales ici : library(rstatix) dvf_Paris %&gt;% get_summary_stats(valeur_fonciere, nombre_pieces_principales, surface_reelle_bati, px_m2, nombre_lots, show=c(&quot;n&quot;,&quot;mean&quot;, &quot;median&quot;, &quot;min&quot;, &quot;max&quot;,&quot;q1&quot;, &quot;q3&quot;)) %&gt;% gt() #oumhmcjkzc table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #oumhmcjkzc thead, #oumhmcjkzc tbody, #oumhmcjkzc tfoot, #oumhmcjkzc tr, #oumhmcjkzc td, #oumhmcjkzc th { border-style: none; } #oumhmcjkzc p { margin: 0; padding: 0; } #oumhmcjkzc .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #oumhmcjkzc .gt_caption { padding-top: 4px; padding-bottom: 4px; } #oumhmcjkzc .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #oumhmcjkzc .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #oumhmcjkzc .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #oumhmcjkzc .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #oumhmcjkzc .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #oumhmcjkzc .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #oumhmcjkzc .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #oumhmcjkzc .gt_column_spanner_outer:first-child { padding-left: 0; } #oumhmcjkzc .gt_column_spanner_outer:last-child { padding-right: 0; } #oumhmcjkzc .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #oumhmcjkzc .gt_spanner_row { border-bottom-style: hidden; } #oumhmcjkzc .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #oumhmcjkzc .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #oumhmcjkzc .gt_from_md > :first-child { margin-top: 0; } #oumhmcjkzc .gt_from_md > :last-child { margin-bottom: 0; } #oumhmcjkzc .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #oumhmcjkzc .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #oumhmcjkzc .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #oumhmcjkzc .gt_row_group_first td { border-top-width: 2px; } #oumhmcjkzc .gt_row_group_first th { border-top-width: 2px; } #oumhmcjkzc .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #oumhmcjkzc .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #oumhmcjkzc .gt_first_summary_row.thick { border-top-width: 2px; } #oumhmcjkzc .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #oumhmcjkzc .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #oumhmcjkzc .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #oumhmcjkzc .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #oumhmcjkzc .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #oumhmcjkzc .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #oumhmcjkzc .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #oumhmcjkzc .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #oumhmcjkzc .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #oumhmcjkzc .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #oumhmcjkzc .gt_left { text-align: left; } #oumhmcjkzc .gt_center { text-align: center; } #oumhmcjkzc .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #oumhmcjkzc .gt_font_normal { font-weight: normal; } #oumhmcjkzc .gt_font_bold { font-weight: bold; } #oumhmcjkzc .gt_font_italic { font-style: italic; } #oumhmcjkzc .gt_super { font-size: 65%; } #oumhmcjkzc .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #oumhmcjkzc .gt_asterisk { font-size: 100%; vertical-align: 0; } #oumhmcjkzc .gt_indent_1 { text-indent: 5px; } #oumhmcjkzc .gt_indent_2 { text-indent: 10px; } #oumhmcjkzc .gt_indent_3 { text-indent: 15px; } #oumhmcjkzc .gt_indent_4 { text-indent: 20px; } #oumhmcjkzc .gt_indent_5 { text-indent: 25px; } variable n mean median min max q1 q3 valeur_fonciere 176343 1966869.429 480000.00 0.150 606210300 285000.00 887825 nombre_pieces_principales 178525 2.410 2.00 0.000 22 1.00 3 surface_reelle_bati 178525 53.100 42.00 1.000 861 28.00 67 px_m2 176342 45436.542 11040.33 0.004 46631562 9218.75 13750 nombre_lots 178526 1.537 2.00 0.000 27 1.00 2 Cela nous permet de comprendre qu’il y a probablement encore quelques filtres à effectuer pour avoir une base propre et cohérente, non seulement sur les valeurs aberrantes - on va y venir - mais aussi sur les valeurs minimum. Peut-on ainsi vendre un appartement avec 0 pièce principale ? Ou d’une surface d’1 m2 ? Ou pour 0€ ? On va donc filtrer la base sur ces éléments. De plus, comme on a vu qu’il y avait beaucoup de valeurs manquantes sur les variables reliées aux numéros de lot supérieur à 3, on va retenir dans la base les seules ventes avec des lots compris entre 1 et 2 (en gros, par exemple, un appartement - lot 1 - ou un appartement et une cave - lot 2). # Filtre pour réduire la base et la rendre plus propre, et sélection en supprimant les variables qui ne nous intéressents plus dvf_Paris &lt;- dvf_Paris %&gt;% filter(nombre_lots %in% c(1,2) &amp; nombre_pieces_principales&gt;0 &amp; surface_reelle_bati&gt;=9 &amp; valeur_fonciere&gt;0) %&gt;% select(-c(lot5_surface_carrez, lot5_numero, lot4_surface_carrez, lot4_numero, lot3_surface_carrez, lot3_numero)) On peut relancer nos statistiques précédentes, pour vérifier que c’est plus cohérent et aussi pour étudier maintenant les maximum de certaines variables, c’est en effet une première manière de voir de potentielles valeurs aberrantes. dvf_Paris %&gt;% get_summary_stats(valeur_fonciere, nombre_pieces_principales, surface_reelle_bati, px_m2, show=c(&quot;n&quot;,&quot;mean&quot;, &quot;median&quot;, &quot;min&quot;, &quot;max&quot;,&quot;q1&quot;, &quot;q3&quot;,&quot;iqr&quot;)) %&gt;% gt() %&gt;% fmt_number(columns = 3:8, sep_mark = &quot; &quot;, decimals = 1) #phodfwdkko table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #phodfwdkko thead, #phodfwdkko tbody, #phodfwdkko tfoot, #phodfwdkko tr, #phodfwdkko td, #phodfwdkko th { border-style: none; } #phodfwdkko p { margin: 0; padding: 0; } #phodfwdkko .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #phodfwdkko .gt_caption { padding-top: 4px; padding-bottom: 4px; } #phodfwdkko .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #phodfwdkko .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #phodfwdkko .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #phodfwdkko .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #phodfwdkko .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #phodfwdkko .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #phodfwdkko .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #phodfwdkko .gt_column_spanner_outer:first-child { padding-left: 0; } #phodfwdkko .gt_column_spanner_outer:last-child { padding-right: 0; } #phodfwdkko .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #phodfwdkko .gt_spanner_row { border-bottom-style: hidden; } #phodfwdkko .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #phodfwdkko .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #phodfwdkko .gt_from_md > :first-child { margin-top: 0; } #phodfwdkko .gt_from_md > :last-child { margin-bottom: 0; } #phodfwdkko .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #phodfwdkko .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #phodfwdkko .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #phodfwdkko .gt_row_group_first td { border-top-width: 2px; } #phodfwdkko .gt_row_group_first th { border-top-width: 2px; } #phodfwdkko .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #phodfwdkko .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #phodfwdkko .gt_first_summary_row.thick { border-top-width: 2px; } #phodfwdkko .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #phodfwdkko .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #phodfwdkko .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #phodfwdkko .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #phodfwdkko .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #phodfwdkko .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #phodfwdkko .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #phodfwdkko .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #phodfwdkko .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #phodfwdkko .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #phodfwdkko .gt_left { text-align: left; } #phodfwdkko .gt_center { text-align: center; } #phodfwdkko .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #phodfwdkko .gt_font_normal { font-weight: normal; } #phodfwdkko .gt_font_bold { font-weight: bold; } #phodfwdkko .gt_font_italic { font-style: italic; } #phodfwdkko .gt_super { font-size: 65%; } #phodfwdkko .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #phodfwdkko .gt_asterisk { font-size: 100%; vertical-align: 0; } #phodfwdkko .gt_indent_1 { text-indent: 5px; } #phodfwdkko .gt_indent_2 { text-indent: 10px; } #phodfwdkko .gt_indent_3 { text-indent: 15px; } #phodfwdkko .gt_indent_4 { text-indent: 20px; } #phodfwdkko .gt_indent_5 { text-indent: 25px; } variable n mean median min max q1 q3 iqr valeur_fonciere 148468 828 062.7 436 000.0 0.1 318 200 000.0 270 000.0 730 000.0 460000.000 nombre_pieces_principales 148468 2.4 2.0 1.0 22.0 1.0 3.0 2.000 surface_reelle_bati 148468 51.4 42.0 9.0 861.0 27.0 65.0 38.000 px_m2 148468 17 120.7 10 740.7 0.0 10 606 666.7 9 038.5 12 758.9 3720.472 On peut également faire quelques graphs sur cette pour mieux visualiser ces valeurs aberrantes, un histogramme, ou une “boîte à moustache” (seule ou en relation avec une autre variable) : dvf_Paris %&gt;% ggplot() + aes(x=px_m2) + geom_histogram(bins=50) dvf_Paris %&gt;% ggplot() + aes(x = annee, y = px_m2) + geom_boxplot() + coord_flip() On voit bien que ce soit avec l’histogramme ou la boîte à moustâche des points aberrants qui “écrasent” les représentations graphiques, de telle sorte qu’on ne voit même pas la distribution, en particulier dans le Boxplot la “boîte” en elle-même. Pour rappel, dans un boxplot, par défaut un point est affiché comme aberrant s’il est en dehors de l’intervalle suivant : \\(I=[Q_{1}−1.5×IQR ; Q_{3}+1.5×IQR]\\), IQR étant l’intervalle interquartile donc la différence entre Q1 et Q3. Mais s’agit-il de “vraies” valeurs aberrantes ? Combien d’observations concernent-elles ? La fonction boxplot.stats() permet de récupérer les valeurs des observations indiquées comme aberrantes, comme cela on peut créer ensuite une variable indiquant si oui ou non l’observation a une valeur “aberrante”. Faisons-cela pour la variable de valeur foncière. # On récupère les valeurs de la partie &#39;out&#39; des sorties de la fonction # &#39;boxplot.stats&#39;, qui correspondent aux valeurs de tout point de données # qui se situe au-delà des extrêmes de la boxplot val_outliers &lt;- boxplot.stats(dvf_Paris$px_m2)$out # On crée une variable dans notre table d&#39;&quot;identification&quot; de ces outliers # avec comme modalité &quot;vraie&quot; si l&#39;observation a une valeur &quot;outliers&quot;, # sinon &quot;Faux&quot; dvf_Paris &lt;- dvf_Paris %&gt;% mutate(px_m2_outliers = case_when(px_m2 %in% c(val_outliers) ~ &quot;Vrai&quot;, TRUE ~ &quot;Faux&quot;)) # Puis on regarde la répartition avec la fonction `tabyl()` du package `janitor()` library(janitor) dvf_Paris %&gt;% tabyl(px_m2_outliers) %&gt;% adorn_pct_formatting() %&gt;% adorn_totals(&quot;row&quot;) %&gt;% gt() #guebcvqhgw table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #guebcvqhgw thead, #guebcvqhgw tbody, #guebcvqhgw tfoot, #guebcvqhgw tr, #guebcvqhgw td, #guebcvqhgw th { border-style: none; } #guebcvqhgw p { margin: 0; padding: 0; } #guebcvqhgw .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #guebcvqhgw .gt_caption { padding-top: 4px; padding-bottom: 4px; } #guebcvqhgw .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #guebcvqhgw .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #guebcvqhgw .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #guebcvqhgw .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #guebcvqhgw .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #guebcvqhgw .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #guebcvqhgw .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #guebcvqhgw .gt_column_spanner_outer:first-child { padding-left: 0; } #guebcvqhgw .gt_column_spanner_outer:last-child { padding-right: 0; } #guebcvqhgw .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #guebcvqhgw .gt_spanner_row { border-bottom-style: hidden; } #guebcvqhgw .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #guebcvqhgw .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #guebcvqhgw .gt_from_md > :first-child { margin-top: 0; } #guebcvqhgw .gt_from_md > :last-child { margin-bottom: 0; } #guebcvqhgw .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #guebcvqhgw .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #guebcvqhgw .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #guebcvqhgw .gt_row_group_first td { border-top-width: 2px; } #guebcvqhgw .gt_row_group_first th { border-top-width: 2px; } #guebcvqhgw .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #guebcvqhgw .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #guebcvqhgw .gt_first_summary_row.thick { border-top-width: 2px; } #guebcvqhgw .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #guebcvqhgw .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #guebcvqhgw .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #guebcvqhgw .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #guebcvqhgw .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #guebcvqhgw .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #guebcvqhgw .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #guebcvqhgw .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #guebcvqhgw .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #guebcvqhgw .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #guebcvqhgw .gt_left { text-align: left; } #guebcvqhgw .gt_center { text-align: center; } #guebcvqhgw .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #guebcvqhgw .gt_font_normal { font-weight: normal; } #guebcvqhgw .gt_font_bold { font-weight: bold; } #guebcvqhgw .gt_font_italic { font-style: italic; } #guebcvqhgw .gt_super { font-size: 65%; } #guebcvqhgw .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #guebcvqhgw .gt_asterisk { font-size: 100%; vertical-align: 0; } #guebcvqhgw .gt_indent_1 { text-indent: 5px; } #guebcvqhgw .gt_indent_2 { text-indent: 10px; } #guebcvqhgw .gt_indent_3 { text-indent: 15px; } #guebcvqhgw .gt_indent_4 { text-indent: 20px; } #guebcvqhgw .gt_indent_5 { text-indent: 25px; } px_m2_outliers n percent Faux 128824 86.8% Vrai 19644 13.2% Total 148468 - On y lit que pour cette variable, il y aurait près de 13,2% de valeurs aberrantes telles qu’indiquées par le boxplot, ce qui correspondant à 19 644 observations, c’est beaucoup ! On peut regarder plus précisément à quelles observations elles correspondent, en sélectionnant avec la variable créée et en triant par ordre croissant ou décroissant. dvf_Paris %&gt;% filter(px_m2_outliers==&#39;Vrai&#39;) %&gt;% select(px_m2, nombre_pieces_principales, surface_reelle_bati, valeur_fonciere) %&gt;% arrange(px_m2) %&gt;% head(5) %&gt;% gt() #nvbmrocpnb table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #nvbmrocpnb thead, #nvbmrocpnb tbody, #nvbmrocpnb tfoot, #nvbmrocpnb tr, #nvbmrocpnb td, #nvbmrocpnb th { border-style: none; } #nvbmrocpnb p { margin: 0; padding: 0; } #nvbmrocpnb .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #nvbmrocpnb .gt_caption { padding-top: 4px; padding-bottom: 4px; } #nvbmrocpnb .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #nvbmrocpnb .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #nvbmrocpnb .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nvbmrocpnb .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nvbmrocpnb .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nvbmrocpnb .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #nvbmrocpnb .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #nvbmrocpnb .gt_column_spanner_outer:first-child { padding-left: 0; } #nvbmrocpnb .gt_column_spanner_outer:last-child { padding-right: 0; } #nvbmrocpnb .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #nvbmrocpnb .gt_spanner_row { border-bottom-style: hidden; } #nvbmrocpnb .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #nvbmrocpnb .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #nvbmrocpnb .gt_from_md > :first-child { margin-top: 0; } #nvbmrocpnb .gt_from_md > :last-child { margin-bottom: 0; } #nvbmrocpnb .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #nvbmrocpnb .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #nvbmrocpnb .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #nvbmrocpnb .gt_row_group_first td { border-top-width: 2px; } #nvbmrocpnb .gt_row_group_first th { border-top-width: 2px; } #nvbmrocpnb .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nvbmrocpnb .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #nvbmrocpnb .gt_first_summary_row.thick { border-top-width: 2px; } #nvbmrocpnb .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nvbmrocpnb .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nvbmrocpnb .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #nvbmrocpnb .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #nvbmrocpnb .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #nvbmrocpnb .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nvbmrocpnb .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nvbmrocpnb .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nvbmrocpnb .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nvbmrocpnb .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nvbmrocpnb .gt_left { text-align: left; } #nvbmrocpnb .gt_center { text-align: center; } #nvbmrocpnb .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #nvbmrocpnb .gt_font_normal { font-weight: normal; } #nvbmrocpnb .gt_font_bold { font-weight: bold; } #nvbmrocpnb .gt_font_italic { font-style: italic; } #nvbmrocpnb .gt_super { font-size: 65%; } #nvbmrocpnb .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #nvbmrocpnb .gt_asterisk { font-size: 100%; vertical-align: 0; } #nvbmrocpnb .gt_indent_1 { text-indent: 5px; } #nvbmrocpnb .gt_indent_2 { text-indent: 10px; } #nvbmrocpnb .gt_indent_3 { text-indent: 15px; } #nvbmrocpnb .gt_indent_4 { text-indent: 20px; } #nvbmrocpnb .gt_indent_5 { text-indent: 25px; } px_m2 nombre_pieces_principales surface_reelle_bati valeur_fonciere 0.003750000 2 40 0.15 0.003906250 7 256 1.00 0.005128205 5 195 1.00 0.005128205 5 195 1.00 0.005882353 5 170 1.00 dvf_Paris %&gt;% filter(px_m2_outliers==&#39;Vrai&#39;) %&gt;% select(px_m2, nombre_pieces_principales, surface_reelle_bati, valeur_fonciere) %&gt;% arrange(desc(px_m2)) %&gt;% head(5) %&gt;% gt() #lvduysjnel table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #lvduysjnel thead, #lvduysjnel tbody, #lvduysjnel tfoot, #lvduysjnel tr, #lvduysjnel td, #lvduysjnel th { border-style: none; } #lvduysjnel p { margin: 0; padding: 0; } #lvduysjnel .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #lvduysjnel .gt_caption { padding-top: 4px; padding-bottom: 4px; } #lvduysjnel .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #lvduysjnel .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #lvduysjnel .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #lvduysjnel .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #lvduysjnel .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #lvduysjnel .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #lvduysjnel .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #lvduysjnel .gt_column_spanner_outer:first-child { padding-left: 0; } #lvduysjnel .gt_column_spanner_outer:last-child { padding-right: 0; } #lvduysjnel .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #lvduysjnel .gt_spanner_row { border-bottom-style: hidden; } #lvduysjnel .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #lvduysjnel .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #lvduysjnel .gt_from_md > :first-child { margin-top: 0; } #lvduysjnel .gt_from_md > :last-child { margin-bottom: 0; } #lvduysjnel .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #lvduysjnel .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #lvduysjnel .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #lvduysjnel .gt_row_group_first td { border-top-width: 2px; } #lvduysjnel .gt_row_group_first th { border-top-width: 2px; } #lvduysjnel .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #lvduysjnel .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #lvduysjnel .gt_first_summary_row.thick { border-top-width: 2px; } #lvduysjnel .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #lvduysjnel .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #lvduysjnel .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #lvduysjnel .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #lvduysjnel .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #lvduysjnel .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #lvduysjnel .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #lvduysjnel .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #lvduysjnel .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #lvduysjnel .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #lvduysjnel .gt_left { text-align: left; } #lvduysjnel .gt_center { text-align: center; } #lvduysjnel .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #lvduysjnel .gt_font_normal { font-weight: normal; } #lvduysjnel .gt_font_bold { font-weight: bold; } #lvduysjnel .gt_font_italic { font-style: italic; } #lvduysjnel .gt_super { font-size: 65%; } #lvduysjnel .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #lvduysjnel .gt_asterisk { font-size: 100%; vertical-align: 0; } #lvduysjnel .gt_indent_1 { text-indent: 5px; } #lvduysjnel .gt_indent_2 { text-indent: 10px; } #lvduysjnel .gt_indent_3 { text-indent: 15px; } #lvduysjnel .gt_indent_4 { text-indent: 20px; } #lvduysjnel .gt_indent_5 { text-indent: 25px; } px_m2 nombre_pieces_principales surface_reelle_bati valeur_fonciere 10606667 1 30 318200000 10606667 1 30 318200000 5582456 2 57 318200000 5582456 2 57 318200000 2560494 4 81 207400000 On voit donc qu’il y a des valeurs considérées comme aberrantes en bas de la distribution (valeurs trop faible) et en haut de la distribution ; ici sur les 5 premières valeurs, on a bien l’impression que ce sont des valeurs aberrantes. Pour être plus précis, on peut calculer les valeurs seuils bas et haut puisqu’on connaît la formule. Le seuil bas sera : 3457.7539401 et le seuil haut : 1.8339641^{4}. Ces seuils peuvent donc être vraisemblables en réalité. Il est donc important de comprendre ces valeurs aberrantes, cela peut parfois correspondre à des observations intéressantes à conserver, il ne s’agit pas juste de les identifier pour les exclure directement ensuite des analyses. Il existe d’autres méthodes (méthode basée sur les percentiles ; méthode de Hampel), et d’autres tests : par exemple, le package outliers vous permet de tester si une valeur (max ou min) est bien une valeur aberrante avec la fonction grubbs.test() (attention bis : à utiliser avec grande précaution et beaucoup de parcimonie), ou avec le package EnvStats et la fonction rosnerTest() pour détecter plusieurs “outliers” à la fois. Pour gérer ces variables aberrantes, on peut les supprimer bien sûr si l’on est sûr que la valeur de la variable n’est pas “normale”, par exemple si on a une variable de salaire avec des modalités inférieures à 0, oui dans ce cas ce sont des mauvais outliers (et d’ailleurs peut-être même pas identifiés comme tel statistiquement) et on peut les supprimer ; de même pour des variables de résultats économiques, on va souvent élaguer la distribution en retirant les 1% (par exemple) du bas et du haut de la distribution pour supprimer des potentiels outliers. On peut tenter cette méthode ici en filtrant les données avant de calculer la distribution de la variable. Sinon, on les isole en créant une variable dichotomique “0/1” ou “Faux/Vrai” ; ou on crée une variable qualitative avec plusieurs catégories (cf. sous-section suivante). Dans les graphiques, en particulier les boîtes à moustache, on peut les supprimer visuellement avec l’option outlier.shape = NA et mettre ensuite une échelle plus réduite (avec ylim=c( , )) pour que le graphique soit plus lisible, mais il faut alors bien préciser dans la légende que certaines valeurs ne sont pas visibles sur le graphique car retirées ; attention à ne pas les supprimer de la base sur laquelle est réalisée la boxplot car sinon cela va modifier les indicateurs (en particulier de moyenne mais pas seulement). Dans un histogramme, on peut de même jouer sur l’échelle. dvf_Paris %&gt;% ggplot() + aes(y = px_m2) + geom_boxplot(outlier.shape = NA) + coord_flip(ylim = c(quantile(dvf_Paris$px_m2, 0.01),quantile(dvf_Paris$px_m2, 0.99))) + labs(title = &quot;Distribution des valeurs foncières en euros&quot;, y=&quot;&quot;, x=&quot;&quot;, caption=&quot;Rq : les valeurs en-dessous du 1% de la distribution et celles au-dessus du 99% de la distribution ne sont pas \\naffichées sur le graphique.&quot;) + theme(plot.caption = element_text(hjust=0)) dvf_Paris %&gt;% ggplot() + aes(px_m2) + geom_histogram(bins=10000) + coord_cartesian(xlim=c(quantile(dvf_Paris$px_m2, 0.01), quantile(dvf_Paris$px_m2, 0.99))) + labs(title = &quot;Distribution des valeurs foncières en euros&quot;, y=&quot;&quot;, x=&quot;Prix au m2&quot;, caption=&quot;Rq : les valeurs en-dessous du 1% de la distribution et celles au-dessus du 99% de la distribution ne sont pas \\naffichées sur le graphique.&quot;) + theme(plot.caption = element_text(hjust=0)) C’est un peu mieux mais on voit que la boxplot est toujours écrasée… et sur l’histogramme on voit qu’il y a probablement encore un problème pour les valeurs faibles du prix au m2 qu’il faudrait “nettoyer”. On peut refaire le graphique en élaguant davantage en bas de la distribution par exemple : dvf_Paris %&gt;% ggplot() + aes(px_m2) + geom_histogram(bins=20000) + coord_cartesian(xlim=c(quantile(dvf_Paris$px_m2, 0.05), quantile(dvf_Paris$px_m2, 0.95))) + labs(title = &quot;Distribution des valeurs foncières en euros&quot;, y=&quot;&quot;, x=&quot;Prix au m2&quot;, caption=&quot;Rq : les valeurs en-dessous du 5% de la distribution et celles au-dessus du 95% de la distribution ne sont pas affichées \\nsur le graphique.&quot;) + theme(plot.caption = element_text(hjust=0)) 3.2.4 Découper en classes une variable quantitative On peut enfin découper en classes une variable quantitative et en faire donc une variable qualitative. On utilise pour cela la fonction cut() du langage de base de R. On peut par exemple découper la variable selon les principaux indicateurs de la distribution. #dvf_Paris %&gt;% get_summary_stats(px_m2) dvf_Paris$px_m2_cat &lt;- cut(dvf_Paris$px_m2, breaks = c(0, quantile(dvf_Paris$px_m2,0.25), mean(dvf_Paris$px_m2), max(dvf_Paris$px_m2)), labels=c(&quot;entre 0 et le Q1(9038€)&quot;, &quot;Entre le Q1 et la moyenne (17121€)&quot;, &quot;Entre la moyenne et le maximum&quot;)) dvf_Paris %&gt;% tabyl(px_m2_cat) %&gt;% adorn_pct_formatting() %&gt;% adorn_totals(&quot;row&quot;) %&gt;% gt() #gswffhsvob table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #gswffhsvob thead, #gswffhsvob tbody, #gswffhsvob tfoot, #gswffhsvob tr, #gswffhsvob td, #gswffhsvob th { border-style: none; } #gswffhsvob p { margin: 0; padding: 0; } #gswffhsvob .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #gswffhsvob .gt_caption { padding-top: 4px; padding-bottom: 4px; } #gswffhsvob .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #gswffhsvob .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #gswffhsvob .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #gswffhsvob .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gswffhsvob .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #gswffhsvob .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #gswffhsvob .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #gswffhsvob .gt_column_spanner_outer:first-child { padding-left: 0; } #gswffhsvob .gt_column_spanner_outer:last-child { padding-right: 0; } #gswffhsvob .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #gswffhsvob .gt_spanner_row { border-bottom-style: hidden; } #gswffhsvob .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #gswffhsvob .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #gswffhsvob .gt_from_md > :first-child { margin-top: 0; } #gswffhsvob .gt_from_md > :last-child { margin-bottom: 0; } #gswffhsvob .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #gswffhsvob .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #gswffhsvob .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #gswffhsvob .gt_row_group_first td { border-top-width: 2px; } #gswffhsvob .gt_row_group_first th { border-top-width: 2px; } #gswffhsvob .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #gswffhsvob .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #gswffhsvob .gt_first_summary_row.thick { border-top-width: 2px; } #gswffhsvob .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gswffhsvob .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #gswffhsvob .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #gswffhsvob .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #gswffhsvob .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #gswffhsvob .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gswffhsvob .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #gswffhsvob .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #gswffhsvob .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #gswffhsvob .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #gswffhsvob .gt_left { text-align: left; } #gswffhsvob .gt_center { text-align: center; } #gswffhsvob .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #gswffhsvob .gt_font_normal { font-weight: normal; } #gswffhsvob .gt_font_bold { font-weight: bold; } #gswffhsvob .gt_font_italic { font-style: italic; } #gswffhsvob .gt_super { font-size: 65%; } #gswffhsvob .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #gswffhsvob .gt_asterisk { font-size: 100%; vertical-align: 0; } #gswffhsvob .gt_indent_1 { text-indent: 5px; } #gswffhsvob .gt_indent_2 { text-indent: 10px; } #gswffhsvob .gt_indent_3 { text-indent: 15px; } #gswffhsvob .gt_indent_4 { text-indent: 20px; } #gswffhsvob .gt_indent_5 { text-indent: 25px; } px_m2_cat n percent entre 0 et le Q1(9038€) 37143 25.0% Entre le Q1 et la moyenne (17121€) 97086 65.4% Entre la moyenne et le maximum 14239 9.6% Total 148468 - On a une classe majoritaire (du Q1 à la moyenne), mais cela nous permet de distinguer 2 classes pour lesquelles le montant du prix au m2 est soit plutôt faible, soit plutôt élevé. À noter que si la variable quantitative en question a des valeurs manquantes, il faudra utiliser la fonction fancycut() ou wafflecut() du package fancycut, l’inconvénient est que cela nous oblige à indiquer les valeurs des différents indicateurs de la distribution. "],["04-Récapitulatif.html", "Section 4 Récapitulatig séance 1 - Data Wrangling 4.1 Ce qu’on a appris 4.2 Enregistrement des tables", " Section 4 Récapitulatig séance 1 - Data Wrangling 4.1 Ce qu’on a appris Cette séance sur la préparation et nettoyage d’une base de données - phase appelée aussi Data Wrangling - nous a permis d’apprendre à : charger des bases de données, y compris dans le cas d’un fichier lourd avec la fonction fread() du package data.table ; repérer les informations intéressantes contenues dans cette base, notamment en allant voir le fichier “annexe”, celui des métadonneés (ou dictionnaire des codes) ; mais ce type de fichier n’est pas toujours disponible, si vous avez des données d’une entreprise, peut-être que l’information décrivant cette base est plus informelle, ou même si vous “aspirez” des données via le web vous n’aurez alors pas du tout d’information décrivant la base… : manipuler la base de données : en identifiant d’abord le format des données, en sélectionnant un champ différent (moins de lignes/d’observations), et/ou des variables spécifiques (moins de colonnes/d’informations), avec les fonctions filter(), select(), subset(), pivot_wider(), pivot_longer(), unique(), arrange(), etc.; manipuler des variables : en identifiant le format des variables, en les mettant dans le bon format, en (re)travaillant les modalités d’une variable qualitative (avec notamment les fonctions mutate(), case_when(), as.factor(), ou encore celles du package factors), en détectant/visualisant/gérant les valeurs manquantes d’une variable quantitative avec entre autres le package naniar, en détectant/visualiant/gérant les valeurs aberrantes d’une variable quantitative à partir en particulier des statistiques de la “boîte à moustaches” (fonction geom_boxplot() à utiliser avec ggplot(), fonction boxplot.stats()), et enfin, en transformant une variable quantitative en variable qualitative (avec les fonctions cut() et fancycut()). L’usage pour cette phase du langage dplyr ou plus généralement du tidyverse est particulièrement conseillée, cela permet d’“enchaîner” des fonctions en une seule instruction. 4.2 Enregistrement des tables Et voilà, on a bien “trituré” ces deux bases de données, maintenant on peut les enregistrer dans notre projet pour pouvoir les réutiliser lors de la prochaine séance. "],["05-Questions-fouille-donnees.html", "Section 5 Quelles questions intéressantes pour une “fouille de données” sur cette base ? 5.1 Caractéristiques de la population de Paris 5.2 Systématiser nos procédures : construire une fonction", " Section 5 Quelles questions intéressantes pour une “fouille de données” sur cette base ? Quelles sont les questions intéressantes que l’on peut se poser ? Qu’est-ce qu’on va pouvoir mettre en évidence à partir de ces données ? D’abord, on peut caractériser la population de Paris et sa petite couronne selon des variables socio-démographiques (sexe, âge, diplôme, statut conjugal, nombre d’enfants, …) et d’emploi (statut d’activité, PCS, condition d’emploi - contrat, temps de travail -, secteur d’activité, …). Ensuite, on peut décrire les logements de Paris et sa petite couronne, selon le type (appartement, maison, HLM, …), la superficie, le nombre de pièces, le nombre de personnes y habitant, le statut d’occupation (propriétaire, locataire, …), l’ancienneté d’occupation. Enifn, on peut décrire plus précisément les pièces du logement en termes de confort (baignoire / douche, salle climatisée, moyen de chauffage), ainsi que les parties communes de l’immeuble (ascenseur, place de stationnement). Enfin, on pourrait étudier les caractéristiques des occupants de ces logements, et en premier lieu ici ce que l’Insee appelle la “personne de référence du ménage”. Par ailleurs, toutes ces analyses peuvent être réalisées en comparant les différentes communes de Paris et sa petite couronne, ou à un niveau géographique plus fin par quartiers, arrondissements ou encore IRIS. Pour manipuler cette base et répondre à quelques-unes de ces questions, nous allons nous concentrer sur la commune de Paris, et allons chercher à reproduire des statistiques publiées sur le site de l’Insee. Nous produirons principalement, lors de cette séance, des tableaux de statistiques, l’analyse graphique fera en effet l’objet de la séance suivante car elle nécessite la présentation détaillée de la “grammaire” Ggplot. Avant cela, si les tables de données (“RP_final” et “meta”) ne sont plus dans votre environnement local, il faut de nouveau les importer à partir de l’enregistrement précédemment effectué dans le dossier ‘data’ de votre projet. Pour cela, il faut utiliser la fonction readRDS(), comme ci-dessous : 5.1 Caractéristiques de la population de Paris Sur le site de l’Insee, vous pouvez trouver les statistiques générales sur les individus à Paris en 2019 ici et là. Comme déjà vu lors de la 1ère séance, l’application de la pondération pour avoir des statistiques représentatives de la population peut être utilisée à l’intérieur de la fonction count() avec l’argument wt=. Cela nous donnera le nombre d’individus concernés par la caractéristique étudiée (par défaut, la variable créée s’appelle “n”, on peut la renommer dans une étape ultérieure avec la fonction rename()). Souvent, on souhaite aussi avoir les pourcentages, on peut alors créer une variable rapportant le nombre de chaque catégorie sur le nombre total d’individus, avec la fonction prop.table() utilisée dans la fonction mutate(). Le package janitor peut permettre enfin d’ajouter une ligne totale (ou une colonne totale selon ce qu’on souhaite faire) avec la fonction adorn_totals(), argument “row” pour avoir le total en ligne ou “col” pour l’avoir en colonne.Des fonctions supplémentaires liées au package gt() peuvent ensuite être utilisées pour mettre en forme le tableau : fmt_number(), tab_header() ou encore tab_source_note(). A partir de ces indications, afficher le tableau suivant à partir d’un code utilisant le langage tidyverse et en une seule procédure (sans créer de table dans votre environnement) : #ecnymbulpo table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ecnymbulpo thead, #ecnymbulpo tbody, #ecnymbulpo tfoot, #ecnymbulpo tr, #ecnymbulpo td, #ecnymbulpo th { border-style: none; } #ecnymbulpo p { margin: 0; padding: 0; } #ecnymbulpo .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ecnymbulpo .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ecnymbulpo .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ecnymbulpo .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ecnymbulpo .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ecnymbulpo .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ecnymbulpo .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ecnymbulpo .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ecnymbulpo .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ecnymbulpo .gt_column_spanner_outer:first-child { padding-left: 0; } #ecnymbulpo .gt_column_spanner_outer:last-child { padding-right: 0; } #ecnymbulpo .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ecnymbulpo .gt_spanner_row { border-bottom-style: hidden; } #ecnymbulpo .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ecnymbulpo .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ecnymbulpo .gt_from_md > :first-child { margin-top: 0; } #ecnymbulpo .gt_from_md > :last-child { margin-bottom: 0; } #ecnymbulpo .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ecnymbulpo .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ecnymbulpo .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ecnymbulpo .gt_row_group_first td { border-top-width: 2px; } #ecnymbulpo .gt_row_group_first th { border-top-width: 2px; } #ecnymbulpo .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ecnymbulpo .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ecnymbulpo .gt_first_summary_row.thick { border-top-width: 2px; } #ecnymbulpo .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ecnymbulpo .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ecnymbulpo .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ecnymbulpo .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ecnymbulpo .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ecnymbulpo .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ecnymbulpo .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ecnymbulpo .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ecnymbulpo .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ecnymbulpo .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ecnymbulpo .gt_left { text-align: left; } #ecnymbulpo .gt_center { text-align: center; } #ecnymbulpo .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ecnymbulpo .gt_font_normal { font-weight: normal; } #ecnymbulpo .gt_font_bold { font-weight: bold; } #ecnymbulpo .gt_font_italic { font-style: italic; } #ecnymbulpo .gt_super { font-size: 65%; } #ecnymbulpo .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ecnymbulpo .gt_asterisk { font-size: 100%; vertical-align: 0; } #ecnymbulpo .gt_indent_1 { text-indent: 5px; } #ecnymbulpo .gt_indent_2 { text-indent: 10px; } #ecnymbulpo .gt_indent_3 { text-indent: 15px; } #ecnymbulpo .gt_indent_4 { text-indent: 20px; } #ecnymbulpo .gt_indent_5 { text-indent: 25px; } Population par sexe en 2019 Sexe Effectif Pourcentage Femmes 1 146 436 52.9 Hommes 1 019 195 47.1 Total 2 165 631 100.0 Source : Insee, RP 2019 ; Champ : Paris. library(tidyverse) library(janitor) library(gt) RP_final %&gt;% filter(DEPT == &quot;75&quot;) %&gt;% mutate(SEXE_moda=case_when(SEXE==&quot;1&quot; ~ &quot;Hommes&quot;, SEXE==&quot;2&quot; ~ &quot;Femmes&quot;)) %&gt;% count(SEXE_moda, wt=IPONDI) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &#39;Sexe&#39;=SEXE_moda) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) %&gt;% tab_header(title = &quot;Population par sexe en 2019&quot;) Il y a plus de femmes habitant Paris en 2019, environ 53%. Cherchons maintenant la répartition de la population parisienne par type d’activité : quelle est la proportion d’actifs ayant un emploi par rapport à la part des chômeurs ou encore des retraites ? Attention au champ sur lequel porte ces statistiques (lire le titre du tableau pour cela…). #ehjacmftrl table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ehjacmftrl thead, #ehjacmftrl tbody, #ehjacmftrl tfoot, #ehjacmftrl tr, #ehjacmftrl td, #ehjacmftrl th { border-style: none; } #ehjacmftrl p { margin: 0; padding: 0; } #ehjacmftrl .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ehjacmftrl .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ehjacmftrl .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ehjacmftrl .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ehjacmftrl .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ehjacmftrl .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ehjacmftrl .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ehjacmftrl .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ehjacmftrl .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ehjacmftrl .gt_column_spanner_outer:first-child { padding-left: 0; } #ehjacmftrl .gt_column_spanner_outer:last-child { padding-right: 0; } #ehjacmftrl .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ehjacmftrl .gt_spanner_row { border-bottom-style: hidden; } #ehjacmftrl .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ehjacmftrl .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ehjacmftrl .gt_from_md > :first-child { margin-top: 0; } #ehjacmftrl .gt_from_md > :last-child { margin-bottom: 0; } #ehjacmftrl .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ehjacmftrl .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ehjacmftrl .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ehjacmftrl .gt_row_group_first td { border-top-width: 2px; } #ehjacmftrl .gt_row_group_first th { border-top-width: 2px; } #ehjacmftrl .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ehjacmftrl .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ehjacmftrl .gt_first_summary_row.thick { border-top-width: 2px; } #ehjacmftrl .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ehjacmftrl .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ehjacmftrl .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ehjacmftrl .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ehjacmftrl .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ehjacmftrl .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ehjacmftrl .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ehjacmftrl .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ehjacmftrl .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ehjacmftrl .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ehjacmftrl .gt_left { text-align: left; } #ehjacmftrl .gt_center { text-align: center; } #ehjacmftrl .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ehjacmftrl .gt_font_normal { font-weight: normal; } #ehjacmftrl .gt_font_bold { font-weight: bold; } #ehjacmftrl .gt_font_italic { font-style: italic; } #ehjacmftrl .gt_super { font-size: 65%; } #ehjacmftrl .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ehjacmftrl .gt_asterisk { font-size: 100%; vertical-align: 0; } #ehjacmftrl .gt_indent_1 { text-indent: 5px; } #ehjacmftrl .gt_indent_2 { text-indent: 10px; } #ehjacmftrl .gt_indent_3 { text-indent: 15px; } #ehjacmftrl .gt_indent_4 { text-indent: 20px; } #ehjacmftrl .gt_indent_5 { text-indent: 25px; } Population de 15-64 ans par type d'activité en 2019 Type d'activité Effectif Pourcentage Actifs ayant un emploi 1 042 588 69.3 Chômeurs 135 014 9.0 Élèves, étudiants et stagiaires non rémunérés 192 205 12.8 Retraités ou préretraités 38 512 2.6 Autres inactifs 95 944 6.4 Total 1 504 263 100.1 Source : Insee, RP 2019 ; Champ : Paris. RP_final %&gt;% filter(DEPT == &quot;75&quot; &amp; !AGEREVQ %in% c(&quot;0&quot;, &quot;5&quot;, &quot;10&quot;, &quot;65&quot;, &quot;70&quot;, &quot;75&quot;, &quot;80&quot;, &quot;85&quot;, &quot;90&quot;, &quot;95&quot;, &quot;100&quot;, &quot;105&quot;, &quot;110&quot;, &quot;115&quot;, &quot;120&quot;)) %&gt;% mutate(TACT_moda1=case_when(TACT == &quot;11&quot; ~ &quot;Actifs ayant un emploi&quot;, TACT == &quot;12&quot; ~ &quot;Chômeurs&quot;, TACT == &quot;22&quot; ~ &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, TACT == &quot;21&quot; ~ &quot;Retraités ou préretraités&quot;, TRUE ~ &quot;Autres inactifs&quot;), TACT_moda1=fct_relevel(TACT_moda1, c(&quot;Actifs ayant un emploi&quot;, &quot;Chômeurs&quot;, &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, &quot;Retraités ou préretraités&quot;, &quot;Autres inactifs&quot;))) %&gt;% count(TACT_moda1, wt=IPONDI) %&gt;% mutate(Pourcentage=round(prop.table(n)*100,1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &quot;Type d&#39;activité&quot;=TACT_moda1) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population de 15-64 ans par type d&#39;activité en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) En 2019, la population parisienne comportait plus de 78% d’actifs dont 69% ayant un emploi et 9% au chômage, le taux de chômage à Paris était donc de 11,5% (135014/(1042588+135014))*100). La part des étudiants ou autres élèves était plus élevée que celle des retraités (ou préretaités) : 12,8% contre 2,6%. Maintenant, affichons les deux dernières colonnes (‘2019’ et ‘dont actifs ayant un emploi’) de ce tableau tiré du site de l’Insee, en mettant la ligne “Ensemble” plutôt en fin de tableau (ces 2 usages sont possibles, question de préférence…). Attention encore une fois au champ de ce tableau… Pour cela, on va : récupérer les libellés des modalités de la variable cS1 à partir du fichier ‘meta’, en créant 2 vecteurs correspondant aux modalités pour le 1er et aux libellés pour le 2nd, puis en créant une variable ‘CS1_moda’ à partir de ces vecteurs ; créer une 1ère table qu’on appellera ‘col2’ qui comportera la 1ère colonne avec les intitulés des PCS et la colonne ‘2019’, attention, il y a une modalité qui ne nous intéresse pas car non affiché dans le tableau de l’Insee, il faudra supprimer cette ligne (vous pouvez utiliser pour cela la fonction slice()) ; créer une 2ème table qu’on appellera ‘col3’ qui comportera la 1ère colonne avec les intitulés des PCS et la colonne ‘dont actifs ayant un emploi’, attention le champ n’est donc pas tout à fait le même ; joindre ces deux tables et appliquer les fonctions gt() et suivantes pour la mise en forme du tableau final. # On va récupérer les libellés des modalités de la variable CS1 à partir du fichier meta : levels_CS1 &lt;- meta[meta$COD_VAR==&quot;CS1&quot;, ]$COD_MOD labels_CS1 &lt;- meta[meta$COD_VAR==&quot;CS1&quot;, ]$LIB_MOD RP_final &lt;- RP_final %&gt;% mutate(CS1_moda=factor(CS1, levels = levels_CS1, labels = labels_CS1)) col2 &lt;- RP_final %&gt;% filter(DEPT == &quot;75&quot; &amp; !AGEREVQ %in% c(&quot;0&quot;, &quot;5&quot;, &quot;10&quot;, &quot;65&quot;, &quot;70&quot;, &quot;75&quot;, &quot;80&quot;, &quot;85&quot;, &quot;90&quot;, &quot;95&quot;, &quot;100&quot;, &quot;105&quot;, &quot;110&quot;, &quot;115&quot;, &quot;120&quot;) &amp; TACT %in% c(&quot;11&quot;, &quot;12&quot;)) %&gt;% count(CS1_moda, wt=IPONDI) %&gt;% mutate(n=round(n)) %&gt;% rename(&#39;2019&#39;=n, &#39;PCS&#39;=CS1_moda) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% slice(-7) col3 &lt;- RP_final %&gt;% filter(DEPT == &quot;75&quot; &amp; !AGEREVQ %in% c(&quot;0&quot;, &quot;5&quot;, &quot;10&quot;, &quot;65&quot;, &quot;70&quot;, &quot;75&quot;, &quot;80&quot;, &quot;85&quot;, &quot;90&quot;, &quot;95&quot;, &quot;100&quot;, &quot;105&quot;, &quot;110&quot;, &quot;115&quot;, &quot;120&quot;) &amp; TACT %in% c(&quot;11&quot;)) %&gt;% count(CS1_moda, wt=IPONDI) %&gt;% mutate(n=round(n)) %&gt;% rename(&#39;dont actifs ayant un emploi&#39;=n, &#39;PCS&#39;=CS1_moda) %&gt;% adorn_totals(&quot;row&quot;) col2 %&gt;% left_join(col3) %&gt;% gt() %&gt;% fmt_number(columns = c(2,3), sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population active de 15-64 ans selon la catégorie socioprofessionnelle en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) # On supprime les tableaux intermédiaires rm(col2, col3) A Paris, la population active comprend en 2019 plus de 500 000 personnes appartenant à la catégorie “cadres et professions intellectuelles supérieures”, des 2 colonnes on peut en déduire qu’il y a environ 31 000 personnes relevant de cette PCS qui sont au chômage. Les cadres sont suivis des professions intermédiaires (plus de 260 000 actifs) et des employés (quasi 220 000). Il y a très peu d’agriculteurs exploitants, ce qui semble assez logique sur le territoire de Paris ! Enfin, pour donner un exemple sur l’étude des caractéristiques des logements, essayons de même de reproduire le tableau de l’Insee ci-dessous. Souvenez-vous que cette base a plusieurs unités statistiques/niveaux : individus, logements/ménages, etc. Il faut donc faire attention : au champ du tableau donc les filtres à utiliser ici ; à avoir d’abord les moyennes sur ces deux types de logements, donc uiliser à la suite les fonctions group_by() et summarise() ; à ajouter ensuite une ligne sur l’ensemble des résidences principales avec la fonction bind_rows() ; à changer les dénominations des colonnes et des modalités, avec les fonctions du package gt() comme cols_label() ou text_case_match(). RP_final %&gt;% filter(DEPT == &quot;75&quot; &amp; LPRM==&quot;1&quot; &amp; CATL==&quot;1&quot; &amp; TYPL %in% c(&quot;1&quot;, &quot;2&quot;)) %&gt;% group_by(TYPL) %&gt;% summarise(Moy_pieces = weighted.mean(as.numeric(as.character(NBPI)), IPONDI, na.rm=T)) %&gt;% bind_rows(summarise(TYPL = &quot;Ensemble des résidences principales&quot;, RP_final[RP_final$DEPT == &quot;75&quot; &amp; RP_final$LPRM==&quot;1&quot; &amp; RP_final$CATL == &quot;1&quot; &amp; RP_final$TYPL %in% c(&quot;1&quot;, &quot;2&quot;), ], Moy_pieces = weighted.mean(as.numeric(as.character(NBPI)), IPONDI, na.rm=T))) %&gt;% gt() %&gt;% fmt_number(columns = 2, dec_mark = &quot;,&quot;, decimals = 1) %&gt;% cols_label(TYPL=&quot;Type de logement&quot;, Moy_pieces=&quot;2019&quot;) %&gt;% text_case_match(&quot;1&quot; ~ &quot;Maison&quot;, &quot;2&quot; ~ (&quot;Appartements&quot;)) %&gt;% tab_header(title = &quot;Nombre moyen de pièces des résidences principales&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) Ainsi, si l’on veut créer des tableaux de répartition à une seule variable, on peut utiliser ces procédures qui se structurent toujours de la même façon. Au lieu de faire un copié-collé du code et de changer le nom des variables, autrement dit pour systématiser nos procédures, une astuce est de créer ses propres fonctions. C’est ce que nous allons étudier maintenant. 5.2 Systématiser nos procédures : construire une fonction Pour ré-utiliser un code de façon plus automatique, créer des fonctions est très utile (et on peut même les stocker dans un fichier .r pour les réutiliser plus tard pour une autre étude). L’idée est qu’à partir d’un bloc d’instructions ou de lignes de codes, on l’intègre dans une fonction qui portera un nom et qui pourra être appliquée sur les paramètres que l’on veut (table/objet différent, variables différentes) et qui nous retournera une valeur en sortie (qu’il faut préciser donc). Par exemple : # Exemple fonction avec 3 arguments nom_fonction &lt;- function(data, var1, var2) { expression... # Ce que la fonction fait return() # Optionnel, mais la plupart du temps utilisé (!), # pour sortir le résultat de la fonction } # L&#39;appel de la fonction devra ainsi préciser la table de données sur laquelle # l&#39;appliquer et les autres arguments : nom_fonction(data = nom_de_ma_table , var1 = nom_de_ma_variable1, var2 = nom_de_ma_variable2) # De plus, on pourra créer un nouvel objet (ici &quot;tab_var&quot;) pour stocker la table # qui est en valeur de sortie de la fonction : tab_var &lt;- nom_fonction(data = nom_de_ma_table , var1 = nom_de_ma_variable1, var2 = nom_de_ma_variable2) Les arguments doivent donc être précisés en entrée de notre fonction, si on ne les précise pas cela nous retournera une erreur… à moins que l’on ait spécifié des valeurs par défaut (ce qui peut être utile si on utilise souvent les mêmes paramètres, par exemple la même base de données) ; il peut y avoir autant d’arguments que l’on souhaite. Si l’on utilise le langage tidyverse, il faut connaître quelques petits “trucs” pour écrire une fonction. Le schéma suivant réalisé par Julien Barnier du CNRS nous sera très utile. Pour une fonction utilisant le langage tidyverse Source : Julien Barnier, https://twitter.com/lapply/status/1493908215796535296?s=20&amp;t=p4aYIEV4GsGS3TGftPa0Nw. Vous trouverez également des informations utiles ici ou là. On peut d’abord créer une fonction reprenant le code précédent pour la construction de tableau. On l’appelle tableau, et on lui donne comme arguments “data”, “filtre_com”, “var_quali”, “pond” et “nom_var_quali”. Dans le langage tidyverse, au sein d’une fonction, il faut appeler une variable avec des doubles-accolades {{ }}. Si l’on utilise une fonction summarise(), une autre subtilité à connaître est que cette syntaxe summarise({{ nom_var }} = mean({{ var }}, na.rm=TRUE)) ne sera pas reconnue, car il faut indiquer non pas un = mais un := pour que la fonction puisse être lue lorsque le nom donné à la variable est de type caractère ou “string”. Enfin, il ne faut pas oublier de retourner un objet en sortie avec return(). Essayez donc de créer une fonction tableau(), reprenant le premier code de la section précédente et remise ci-dessous pour information : RP_final %&gt;% filter(DEPT == &quot;75&quot;) %&gt;% mutate(SEXE_moda=case_when(SEXE==&quot;1&quot; ~ &quot;Hommes&quot;, SEXE==&quot;2&quot; ~ &quot;Femmes&quot;)) %&gt;% count(SEXE_moda, wt=IPONDI) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &#39;Sexe&#39;=SEXE_moda) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population par sexe en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) tableau &lt;- function(data, filtre_dept, var_quali, pond=IPONDI, nom_var_quali){ tab &lt;- data %&gt;% filter(DEPT == filtre_dept) %&gt;% count({{ var_quali }}, wt={{ pond }}) %&gt;% mutate(Pourcentage=prop.table(n)*100, Pourcentage=round(Pourcentage, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, {{nom_var_quali}}:={{ var_quali }}) return(tab) } On peut vérifier qu’on obtient bien la même chose : RP_final %&gt;% mutate(SEXE_moda=case_when(SEXE==&quot;1&quot; ~ &quot;Hommes&quot;, SEXE==&quot;2&quot; ~ &quot;Femmes&quot;)) %&gt;% tableau(filtre_dept=&quot;75&quot;, var_quali=SEXE_moda, nom_var_quali=&quot;Sexe&quot;) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population par sexe en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) #zcyfvphuxi table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #zcyfvphuxi thead, #zcyfvphuxi tbody, #zcyfvphuxi tfoot, #zcyfvphuxi tr, #zcyfvphuxi td, #zcyfvphuxi th { border-style: none; } #zcyfvphuxi p { margin: 0; padding: 0; } #zcyfvphuxi .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #zcyfvphuxi .gt_caption { padding-top: 4px; padding-bottom: 4px; } #zcyfvphuxi .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #zcyfvphuxi .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #zcyfvphuxi .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #zcyfvphuxi .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zcyfvphuxi .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #zcyfvphuxi .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #zcyfvphuxi .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #zcyfvphuxi .gt_column_spanner_outer:first-child { padding-left: 0; } #zcyfvphuxi .gt_column_spanner_outer:last-child { padding-right: 0; } #zcyfvphuxi .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #zcyfvphuxi .gt_spanner_row { border-bottom-style: hidden; } #zcyfvphuxi .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #zcyfvphuxi .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #zcyfvphuxi .gt_from_md > :first-child { margin-top: 0; } #zcyfvphuxi .gt_from_md > :last-child { margin-bottom: 0; } #zcyfvphuxi .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #zcyfvphuxi .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #zcyfvphuxi .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #zcyfvphuxi .gt_row_group_first td { border-top-width: 2px; } #zcyfvphuxi .gt_row_group_first th { border-top-width: 2px; } #zcyfvphuxi .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #zcyfvphuxi .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #zcyfvphuxi .gt_first_summary_row.thick { border-top-width: 2px; } #zcyfvphuxi .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zcyfvphuxi .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #zcyfvphuxi .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #zcyfvphuxi .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #zcyfvphuxi .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #zcyfvphuxi .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zcyfvphuxi .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #zcyfvphuxi .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #zcyfvphuxi .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #zcyfvphuxi .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #zcyfvphuxi .gt_left { text-align: left; } #zcyfvphuxi .gt_center { text-align: center; } #zcyfvphuxi .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #zcyfvphuxi .gt_font_normal { font-weight: normal; } #zcyfvphuxi .gt_font_bold { font-weight: bold; } #zcyfvphuxi .gt_font_italic { font-style: italic; } #zcyfvphuxi .gt_super { font-size: 65%; } #zcyfvphuxi .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #zcyfvphuxi .gt_asterisk { font-size: 100%; vertical-align: 0; } #zcyfvphuxi .gt_indent_1 { text-indent: 5px; } #zcyfvphuxi .gt_indent_2 { text-indent: 10px; } #zcyfvphuxi .gt_indent_3 { text-indent: 15px; } #zcyfvphuxi .gt_indent_4 { text-indent: 20px; } #zcyfvphuxi .gt_indent_5 { text-indent: 25px; } Population par sexe en 2019 Sexe Effectif Pourcentage Femmes 1 146 436 52.9 Hommes 1 019 195 47.1 Total 2 165 631 100.0 Source : Insee, RP 2019 ; Champ : Paris. On a gagné 5 lignes de codes ! Si on a plusieurs filtres à mettre, comme on a pu le voir avec le 2nd tableau, on peut utiliser l’argument “…” (lire “dot”) : cet argument est très pratique si l’on ne sait pas combien il y aura de variable(s) dans la fonction à laquelle elle s’applique, c’est-à-dire autant 0 variable, 1 variable ou plus d’une variable ; mais elle peut aussi être “dangereuse” si on ne se souvient plus qu’on l’a créée et/ou si on ne fait pas attention à bien remplir les autres arguments avec les noms correspondants. Si on réécrit la fonction tableau et qu’on l’applique au 2nd tableau créé précédemment, cela donnerait ceci : tableau &lt;- function(data, ..., var_quali, pond=IPONDI, nom_var_quali){ tab &lt;- data %&gt;% filter(...) %&gt;% count({{ var_quali }}, wt={{ pond }}) %&gt;% mutate(Pourcentage=prop.table(n)*100, Pourcentage=round(Pourcentage, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, {{nom_var_quali}}:={{ var_quali }}) return(tab) } RP_final %&gt;% mutate(TACT_moda1=case_when(TACT == &quot;11&quot; ~ &quot;Actifs ayant un emploi&quot;, TACT == &quot;12&quot; ~ &quot;Chômeurs&quot;, TACT == &quot;22&quot; ~ &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, TACT == &quot;21&quot; ~ &quot;Retraités ou préretraités&quot;, TRUE ~ &quot;Autres inactifs&quot;), TACT_moda1=fct_relevel(TACT_moda1, c(&quot;Actifs ayant un emploi&quot;, &quot;Chômeurs&quot;, &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, &quot;Retraités ou préretraités&quot;, &quot;Autres inactifs&quot;))) %&gt;% tableau(DEPT == &quot;75&quot; &amp; !AGEREVQ %in% c(&quot;0&quot;, &quot;5&quot;, &quot;10&quot;, &quot;65&quot;, &quot;70&quot;, &quot;75&quot;, &quot;80&quot;, &quot;85&quot;, &quot;90&quot;, &quot;95&quot;, &quot;100&quot;, &quot;105&quot;, &quot;110&quot;, &quot;115&quot;, &quot;120&quot;), var_quali=TACT_moda1, nom_var_quali=&quot;Type d&#39;activité&quot;) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population de 15-64 ans par type d&#39;activité en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) #ibtiagwzrs table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ibtiagwzrs thead, #ibtiagwzrs tbody, #ibtiagwzrs tfoot, #ibtiagwzrs tr, #ibtiagwzrs td, #ibtiagwzrs th { border-style: none; } #ibtiagwzrs p { margin: 0; padding: 0; } #ibtiagwzrs .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ibtiagwzrs .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ibtiagwzrs .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ibtiagwzrs .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ibtiagwzrs .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ibtiagwzrs .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ibtiagwzrs .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ibtiagwzrs .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ibtiagwzrs .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ibtiagwzrs .gt_column_spanner_outer:first-child { padding-left: 0; } #ibtiagwzrs .gt_column_spanner_outer:last-child { padding-right: 0; } #ibtiagwzrs .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ibtiagwzrs .gt_spanner_row { border-bottom-style: hidden; } #ibtiagwzrs .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ibtiagwzrs .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ibtiagwzrs .gt_from_md > :first-child { margin-top: 0; } #ibtiagwzrs .gt_from_md > :last-child { margin-bottom: 0; } #ibtiagwzrs .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ibtiagwzrs .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ibtiagwzrs .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ibtiagwzrs .gt_row_group_first td { border-top-width: 2px; } #ibtiagwzrs .gt_row_group_first th { border-top-width: 2px; } #ibtiagwzrs .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ibtiagwzrs .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ibtiagwzrs .gt_first_summary_row.thick { border-top-width: 2px; } #ibtiagwzrs .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ibtiagwzrs .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ibtiagwzrs .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ibtiagwzrs .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ibtiagwzrs .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ibtiagwzrs .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ibtiagwzrs .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ibtiagwzrs .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ibtiagwzrs .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ibtiagwzrs .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ibtiagwzrs .gt_left { text-align: left; } #ibtiagwzrs .gt_center { text-align: center; } #ibtiagwzrs .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ibtiagwzrs .gt_font_normal { font-weight: normal; } #ibtiagwzrs .gt_font_bold { font-weight: bold; } #ibtiagwzrs .gt_font_italic { font-style: italic; } #ibtiagwzrs .gt_super { font-size: 65%; } #ibtiagwzrs .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ibtiagwzrs .gt_asterisk { font-size: 100%; vertical-align: 0; } #ibtiagwzrs .gt_indent_1 { text-indent: 5px; } #ibtiagwzrs .gt_indent_2 { text-indent: 10px; } #ibtiagwzrs .gt_indent_3 { text-indent: 15px; } #ibtiagwzrs .gt_indent_4 { text-indent: 20px; } #ibtiagwzrs .gt_indent_5 { text-indent: 25px; } Population de 15-64 ans par type d'activité en 2019 Type d'activité Effectif Pourcentage Actifs ayant un emploi 1 042 588 69.3 Chômeurs 135 014 9.0 Élèves, étudiants et stagiaires non rémunérés 192 205 12.8 Retraités ou préretraités 38 512 2.6 Autres inactifs 95 944 6.4 Total 1 504 263 100.1 Source : Insee, RP 2019 ; Champ : Paris. Une autre façon de faire serait de créer un vecteur qui contiendrait ces différents filtres mais qu’il faudrait combiner dans une chaîne de caractères, ce qui est possible avec la fonction paste0(), et l’insérer ensuite dans la ligne de code dplir en utilisant eval(parse(text=)) pour convertir cette chaîne de caractéres en une expression (parse(text=)) pour que R puisse l’évaluer/le calculer avec la fonction eval(). tableau_bis &lt;- function(data, vars_filtre, var_quali, pond=IPONDI, nom_var_quali){ text_filtre &lt;- paste0(&quot;(&quot;, vars_filtre, &quot;)&quot;, collapse = &quot; &amp; &quot;) tab1 &lt;- data %&gt;% filter(eval(parse(text = text_filtre))) %&gt;% count({{ var_quali }}, wt={{ pond }}) %&gt;% mutate(Pourcentage=prop.table(n)*100, Pourcentage=round(Pourcentage, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, {{nom_var_quali}}:={{ var_quali }}) return(tab1) } # Attention, comme les filtres sont contenues dans des &quot; &quot;, il faut à l&#39;intérieur des filtres utiliser les &#39; &#39; plutôt que les &quot; &quot; mes_filtres &lt;- c(&quot;DEPT == &#39;75&#39;&quot;, &quot;!AGEREVQ %in% c(&#39;0&#39;, &#39;5&#39;, &#39;10&#39;, &#39;65&#39;, &#39;70&#39;, &#39;75&#39;, &#39;80&#39;, &#39;85&#39;, &#39;90&#39;, &#39;95&#39;, &#39;100&#39;, &#39;105&#39;, &#39;110&#39;, &#39;115&#39;, &#39;120&#39;)&quot;) RP_final %&gt;% mutate(TACT_moda1=case_when(TACT == &quot;11&quot; ~ &quot;Actifs ayant un emploi&quot;, TACT == &quot;12&quot; ~ &quot;Chômeurs&quot;, TACT == &quot;22&quot; ~ &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, TACT == &quot;21&quot; ~ &quot;Retraités ou préretraités&quot;, TRUE ~ &quot;Autres inactifs&quot;), TACT_moda1=fct_relevel(TACT_moda1, c(&quot;Actifs ayant un emploi&quot;, &quot;Chômeurs&quot;, &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, &quot;Retraités ou préretraités&quot;, &quot;Autres inactifs&quot;))) %&gt;% tableau_bis(mes_filtres, var_quali=TACT_moda1, nom_var_quali=&quot;Type d&#39;activité&quot;) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population de 15-64 ans par type d&#39;activité en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) On peut également créer une fonction pour permettre de récupérer plus rapidement les libellés des variables à partir du fichier de métadonnées : # Pour la fonction mutate, on est de nouveau obligé d&#39;utiliser l&#39;expression &#39;eval(parse(text={{ cod_var }}))&#39; sinon R ne # comprend pas que la variable utilisée est une expression de type caractère libelles_var &lt;- function(data, cod_var, new_var){ levels_var &lt;- meta[meta$COD_VAR=={{ cod_var }}, ]$COD_MOD labels_var &lt;- meta[meta$COD_VAR=={{ cod_var }}, ]$LIB_MOD data %&gt;% mutate({{ new_var }} := factor(eval(parse(text={{ cod_var }})), levels = levels_var, labels = labels_var)) } # Autre possibilité, utiliser la fonction `sym()` (qui crée un symbole à partir # d&#39;une chaîne de caractères) avec les &quot;!!&quot; (opérateur bang-bang qui permet de # forcer l&#39;évaluation d&#39;une partie d&#39;une expression avant le reste) : # libelles_var &lt;- function(data, cod_var, new_var){ # # levels_var &lt;- meta[meta$COD_VAR=={{ cod_var }}, ]$COD_MOD # labels_var &lt;- meta[meta$COD_VAR=={{ cod_var }}, ]$LIB_MOD # data %&gt;% mutate({{ new_var }} := factor(!!sym({{ cod_var }}), levels = levels_var, labels = labels_var)) # # } Enfin, essayez d’écrire une seconde fonction somme() permettant de systématiser le code utilisée en fin de 1ère séance et qui donnait un tableau de contingence du nombre de personnes caractériées par son statut par commune (cela nous servira pour plus tard…) ; le voici pour rappel : RP_final %&gt;% group_by(COM) %&gt;% count(TACT_moda, wt=IPONDI) %&gt;% mutate(n=round(n)) %&gt;% pivot_wider(names_from = TACT_moda, values_from = n) somme &lt;- function(data, var_gpe, nom_var){ som &lt;- data %&gt;% group_by({{var_gpe}}) %&gt;% count({{nom_var}}, wt=IPONDI) %&gt;% mutate(n=round(n)) %&gt;% pivot_wider(names_from = {{nom_var}}, values_from = n) return(som) } Vérifions : somme(data=RP_final, COM, TACT_moda) # A tibble: 137 × 5 COM `Actifs en emploi` Chômeurs Retraités `Autres inactifs` &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 75101 8366 941 2630 3979 2 75102 13118 1378 2148 4964 3 75103 19239 2085 4589 8123 4 75104 15227 1863 4508 7513 5 75105 27378 2611 10607 17618 6 75106 18073 1842 8180 12176 7 75107 23394 2165 9573 13735 8 75108 18254 1565 5297 10534 9 75109 34155 3482 7264 15125 10 75110 46454 6343 10645 23078 # ℹ 127 more rows La création de fonctions est donc très utile pour avoir un code plus efficace ; il faut toutefois réfléchir à son usage avant de la créer pour savoir à quel point il faut systématiser les procédures utilisées, certains éléments devant être laissés probablement en-dehors de la fonction, comme dans l’exemple précédent le fait d’arrondir les chiffres. Il faut par ailleurs toujours vérfier, sur un ou deux exemples, que la fonction fonctionne bien, c’est-à-dire donne les mêmes résultats que le code initial. Pour pouvoir les réutiliser ultérieurement, on peut les réécrire dans un nouveau script qu’on enregistre dans un dossier de notre projet qu’on intitule “fonctions” ; il suffira ensuite d’appeler ce programme avec la fonction source() : source(&quot;fonctions/fonctions.R&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
